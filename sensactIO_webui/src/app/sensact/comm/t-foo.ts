// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class tFoo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tFoo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstFoo(bb:flatbuffers.ByteBuffer, obj?:tFoo):tFoo {
  return (obj || new tFoo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstFoo(bb:flatbuffers.ByteBuffer, obj?:tFoo):tFoo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tFoo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bla():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static starttFoo(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBla(builder:flatbuffers.Builder, bla:number) {
  builder.addFieldInt32(0, bla, 0);
}

static endtFoo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtFoo(builder:flatbuffers.Builder, bla:number):flatbuffers.Offset {
  tFoo.starttFoo(builder);
  tFoo.addBla(builder, bla);
  return tFoo.endtFoo(builder);
}
}
