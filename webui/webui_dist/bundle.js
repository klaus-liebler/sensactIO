(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.sensact = void 0;
/**
 * @enum {number}
 */
var sensact;
(function (sensact) {
    var comm;
    (function (comm) {
        let eBlindState;
        (function (eBlindState) {
            eBlindState[eBlindState["STOP"] = 0] = "STOP";
            eBlindState[eBlindState["UP"] = 1] = "UP";
            eBlindState[eBlindState["DOWN"] = 2] = "DOWN";
            eBlindState[eBlindState["PREPARE"] = 3] = "PREPARE";
        })(eBlindState = comm.eBlindState || (comm.eBlindState = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let eBlindCommand;
        (function (eBlindCommand) {
            eBlindCommand[eBlindCommand["STOP"] = 0] = "STOP";
            eBlindCommand[eBlindCommand["UP"] = 1] = "UP";
            eBlindCommand[eBlindCommand["DOWN"] = 2] = "DOWN";
        })(eBlindCommand = comm.eBlindCommand || (comm.eBlindCommand = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let eSinglePwmCommand;
        (function (eSinglePwmCommand) {
            eSinglePwmCommand[eSinglePwmCommand["TOGGLE"] = 0] = "TOGGLE";
            eSinglePwmCommand[eSinglePwmCommand["CHANGE_INTENSITY"] = 1] = "CHANGE_INTENSITY";
        })(eSinglePwmCommand = comm.eSinglePwmCommand || (comm.eSinglePwmCommand = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let eOnOffCommand;
        (function (eOnOffCommand) {
            eOnOffCommand[eOnOffCommand["ON"] = 0] = "ON";
            eOnOffCommand[eOnOffCommand["AUTO"] = 1] = "AUTO";
            eOnOffCommand[eOnOffCommand["OFF"] = 2] = "OFF";
            eOnOffCommand[eOnOffCommand["TRIGGER"] = 3] = "TRIGGER";
            eOnOffCommand[eOnOffCommand["TRIGGER_MSECS"] = 4] = "TRIGGER_MSECS";
        })(eOnOffCommand = comm.eOnOffCommand || (comm.eOnOffCommand = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let eOnOffState;
        (function (eOnOffState) {
            eOnOffState[eOnOffState["MANUAL_OFF"] = 0] = "MANUAL_OFF";
            eOnOffState[eOnOffState["MANUAL_ON"] = 1] = "MANUAL_ON";
            eOnOffState[eOnOffState["AUTO_OFF"] = 2] = "AUTO_OFF";
            eOnOffState[eOnOffState["AUTO_ON"] = 3] = "AUTO_ON";
        })(eOnOffState = comm.eOnOffState || (comm.eOnOffState = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let uState;
        (function (uState) {
            uState[uState["NONE"] = 0] = "NONE";
            uState[uState["tBlindState"] = 1] = "tBlindState";
            uState[uState["tSinglePwmState"] = 2] = "tSinglePwmState";
            uState[uState["tOnOffState"] = 3] = "tOnOffState";
        })(uState = comm.uState || (comm.uState = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let uCommand;
        (function (uCommand) {
            uCommand[uCommand["NONE"] = 0] = "NONE";
            uCommand[uCommand["tBlindCommand"] = 1] = "tBlindCommand";
            uCommand[uCommand["tSinglePwmCommand"] = 2] = "tSinglePwmCommand";
            uCommand[uCommand["tOnOffCommand"] = 3] = "tOnOffCommand";
        })(uCommand = comm.uCommand || (comm.uCommand = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let eRelayInterlockMode;
        (function (eRelayInterlockMode) {
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_UP__RELAY2_DOWN"] = 0] = "RELAY1_UP__RELAY2_DOWN";
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_DOWN__RELAY2_UP"] = 1] = "RELAY1_DOWN__RELAY2_UP";
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_POWER__RELAY2_UP"] = 2] = "RELAY1_POWER__RELAY2_UP";
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_POWER__RELAY2_DOWN"] = 3] = "RELAY1_POWER__RELAY2_DOWN";
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_UP__RELAY2_POWER"] = 4] = "RELAY1_UP__RELAY2_POWER";
            eRelayInterlockMode[eRelayInterlockMode["RELAY1_DOWN__RELAY2_POWER"] = 5] = "RELAY1_DOWN__RELAY2_POWER";
        })(eRelayInterlockMode = comm.eRelayInterlockMode || (comm.eRelayInterlockMode = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @enum {number}
 */
(function (sensact) {
    var comm;
    (function (comm) {
        let uConfig;
        (function (uConfig) {
            uConfig[uConfig["NONE"] = 0] = "NONE";
            uConfig[uConfig["tBlindConfig"] = 1] = "tBlindConfig";
            uConfig[uConfig["tSinglePwmConfig"] = 2] = "tSinglePwmConfig";
            uConfig[uConfig["tOnOffConfig"] = 3] = "tOnOffConfig";
        })(uConfig = comm.uConfig || (comm.uConfig = {}));
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
;
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tBlindState {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tBlindState
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindState= obj
             * @returns tBlindState
             */
            static getRootAstBlindState(bb, obj) {
                return (obj || new tBlindState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindState= obj
             * @returns tBlindState
             */
            static getSizePrefixedRootAstBlindState(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tBlindState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            position() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns sensact.comm.eBlindState
             */
            state() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eBlindState.STOP;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttBlindState(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number position
             */
            static addPosition(builder, position) {
                builder.addFieldInt16(0, position, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eBlindState state
             */
            static addState(builder, state) {
                builder.addFieldInt8(1, state, sensact.comm.eBlindState.STOP);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtBlindState(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtBlindState(builder, position, state) {
                tBlindState.starttBlindState(builder);
                tBlindState.addPosition(builder, position);
                tBlindState.addState(builder, state);
                return tBlindState.endtBlindState(builder);
            }
        }
        comm.tBlindState = tBlindState;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tSinglePwmState {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tSinglePwmState
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmState= obj
             * @returns tSinglePwmState
             */
            static getRootAstSinglePwmState(bb, obj) {
                return (obj || new tSinglePwmState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmState= obj
             * @returns tSinglePwmState
             */
            static getSizePrefixedRootAstSinglePwmState(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tSinglePwmState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            intensity0100() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns boolean
             */
            on() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttSinglePwmState(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number intensity0100
             */
            static addIntensity0100(builder, intensity0100) {
                builder.addFieldInt8(0, intensity0100, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param boolean on
             */
            static addOn(builder, on) {
                builder.addFieldInt8(1, +on, +false);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtSinglePwmState(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtSinglePwmState(builder, intensity0100, on) {
                tSinglePwmState.starttSinglePwmState(builder);
                tSinglePwmState.addIntensity0100(builder, intensity0100);
                tSinglePwmState.addOn(builder, on);
                return tSinglePwmState.endtSinglePwmState(builder);
            }
        }
        comm.tSinglePwmState = tSinglePwmState;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tOnOffState {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tOnOffState
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffState= obj
             * @returns tOnOffState
             */
            static getRootAstOnOffState(bb, obj) {
                return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffState= obj
             * @returns tOnOffState
             */
            static getSizePrefixedRootAstOnOffState(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns sensact.comm.eOnOffState
             */
            state() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffState.MANUAL_OFF;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttOnOffState(builder) {
                builder.startObject(1);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eOnOffState state
             */
            static addState(builder, state) {
                builder.addFieldInt8(0, state, sensact.comm.eOnOffState.MANUAL_OFF);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtOnOffState(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtOnOffState(builder, state) {
                tOnOffState.starttOnOffState(builder);
                tOnOffState.addState(builder, state);
                return tOnOffState.endtOnOffState(builder);
            }
        }
        comm.tOnOffState = tOnOffState;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tStateWrapper {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tStateWrapper
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tStateWrapper= obj
             * @returns tStateWrapper
             */
            static getRootAstStateWrapper(bb, obj) {
                return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tStateWrapper= obj
             * @returns tStateWrapper
             */
            static getSizePrefixedRootAstStateWrapper(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            applicationId() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns sensact.comm.uState
             */
            stateType() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : sensact.comm.uState.NONE;
            }
            ;
            /**
             * @param flatbuffers.Table obj
             * @returns ?flatbuffers.Table
             */
            state(obj) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttStateWrapper(builder) {
                builder.startObject(3);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number applicationId
             */
            static addApplicationId(builder, applicationId) {
                builder.addFieldInt32(0, applicationId, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.uState stateType
             */
            static addStateType(builder, stateType) {
                builder.addFieldInt8(1, stateType, sensact.comm.uState.NONE);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset stateOffset
             */
            static addState(builder, stateOffset) {
                builder.addFieldOffset(2, stateOffset, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtStateWrapper(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtStateWrapper(builder, applicationId, stateType, stateOffset) {
                tStateWrapper.starttStateWrapper(builder);
                tStateWrapper.addApplicationId(builder, applicationId);
                tStateWrapper.addStateType(builder, stateType);
                tStateWrapper.addState(builder, stateOffset);
                return tStateWrapper.endtStateWrapper(builder);
            }
        }
        comm.tStateWrapper = tStateWrapper;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tState {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tState
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tState= obj
             * @returns tState
             */
            static getRootAstState(bb, obj) {
                return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tState= obj
             * @returns tState
             */
            static getSizePrefixedRootAstState(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            timestamp() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param number index
             * @param sensact.comm.tStateWrapper= obj
             * @returns sensact.comm.tStateWrapper
             */
            states(index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new sensact.comm.tStateWrapper()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            }
            ;
            /**
             * @returns number
             */
            statesLength() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttState(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number timestamp
             */
            static addTimestamp(builder, timestamp) {
                builder.addFieldInt32(0, timestamp, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset statesOffset
             */
            static addStates(builder, statesOffset) {
                builder.addFieldOffset(1, statesOffset, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            static createStatesVector(builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            static startStatesVector(builder, numElems) {
                builder.startVector(4, numElems, 4);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtState(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtState(builder, timestamp, statesOffset) {
                tState.starttState(builder);
                tState.addTimestamp(builder, timestamp);
                tState.addStates(builder, statesOffset);
                return tState.endtState(builder);
            }
        }
        comm.tState = tState;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tBlindCommand {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tBlindCommand
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindCommand= obj
             * @returns tBlindCommand
             */
            static getRootAstBlindCommand(bb, obj) {
                return (obj || new tBlindCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindCommand= obj
             * @returns tBlindCommand
             */
            static getSizePrefixedRootAstBlindCommand(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tBlindCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns sensact.comm.eBlindCommand
             */
            cmd() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eBlindCommand.STOP;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttBlindCommand(builder) {
                builder.startObject(1);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eBlindCommand cmd
             */
            static addCmd(builder, cmd) {
                builder.addFieldInt8(0, cmd, sensact.comm.eBlindCommand.STOP);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtBlindCommand(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtBlindCommand(builder, cmd) {
                tBlindCommand.starttBlindCommand(builder);
                tBlindCommand.addCmd(builder, cmd);
                return tBlindCommand.endtBlindCommand(builder);
            }
        }
        comm.tBlindCommand = tBlindCommand;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tSinglePwmCommand {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tSinglePwmCommand
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmCommand= obj
             * @returns tSinglePwmCommand
             */
            static getRootAstSinglePwmCommand(bb, obj) {
                return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmCommand= obj
             * @returns tSinglePwmCommand
             */
            static getSizePrefixedRootAstSinglePwmCommand(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns sensact.comm.eSinglePwmCommand
             */
            cmd() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eSinglePwmCommand.TOGGLE;
            }
            ;
            /**
             * @returns number
             */
            intensity0100() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttSinglePwmCommand(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eSinglePwmCommand cmd
             */
            static addCmd(builder, cmd) {
                builder.addFieldInt8(0, cmd, sensact.comm.eSinglePwmCommand.TOGGLE);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number intensity0100
             */
            static addIntensity0100(builder, intensity0100) {
                builder.addFieldInt8(1, intensity0100, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtSinglePwmCommand(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtSinglePwmCommand(builder, cmd, intensity0100) {
                tSinglePwmCommand.starttSinglePwmCommand(builder);
                tSinglePwmCommand.addCmd(builder, cmd);
                tSinglePwmCommand.addIntensity0100(builder, intensity0100);
                return tSinglePwmCommand.endtSinglePwmCommand(builder);
            }
        }
        comm.tSinglePwmCommand = tSinglePwmCommand;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tOnOffCommand {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tOnOffCommand
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffCommand= obj
             * @returns tOnOffCommand
             */
            static getRootAstOnOffCommand(bb, obj) {
                return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffCommand= obj
             * @returns tOnOffCommand
             */
            static getSizePrefixedRootAstOnOffCommand(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns sensact.comm.eOnOffCommand
             */
            cmd() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffCommand.ON;
            }
            ;
            /**
             * @returns number
             */
            msecs() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttOnOffCommand(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eOnOffCommand cmd
             */
            static addCmd(builder, cmd) {
                builder.addFieldInt8(0, cmd, sensact.comm.eOnOffCommand.ON);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number msecs
             */
            static addMsecs(builder, msecs) {
                builder.addFieldInt32(1, msecs, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtOnOffCommand(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtOnOffCommand(builder, cmd, msecs) {
                tOnOffCommand.starttOnOffCommand(builder);
                tOnOffCommand.addCmd(builder, cmd);
                tOnOffCommand.addMsecs(builder, msecs);
                return tOnOffCommand.endtOnOffCommand(builder);
            }
        }
        comm.tOnOffCommand = tOnOffCommand;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tCommand {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tCommand
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tCommand= obj
             * @returns tCommand
             */
            static getRootAstCommand(bb, obj) {
                return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tCommand= obj
             * @returns tCommand
             */
            static getSizePrefixedRootAstCommand(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            applicationId() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns sensact.comm.uCommand
             */
            commandType() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : sensact.comm.uCommand.NONE;
            }
            ;
            /**
             * @param flatbuffers.Table obj
             * @returns ?flatbuffers.Table
             */
            command(obj) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttCommand(builder) {
                builder.startObject(3);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number applicationId
             */
            static addApplicationId(builder, applicationId) {
                builder.addFieldInt32(0, applicationId, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.uCommand commandType
             */
            static addCommandType(builder, commandType) {
                builder.addFieldInt8(1, commandType, sensact.comm.uCommand.NONE);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset commandOffset
             */
            static addCommand(builder, commandOffset) {
                builder.addFieldOffset(2, commandOffset, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtCommand(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtCommand(builder, applicationId, commandType, commandOffset) {
                tCommand.starttCommand(builder);
                tCommand.addApplicationId(builder, applicationId);
                tCommand.addCommandType(builder, commandType);
                tCommand.addCommand(builder, commandOffset);
                return tCommand.endtCommand(builder);
            }
        }
        comm.tCommand = tCommand;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tBlindConfig {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tBlindConfig
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindConfig= obj
             * @returns tBlindConfig
             */
            static getRootAstBlindConfig(bb, obj) {
                return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tBlindConfig= obj
             * @returns tBlindConfig
             */
            static getSizePrefixedRootAstBlindConfig(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            relay1() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            relay2() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns sensact.comm.eRelayInterlockMode
             */
            mode() {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN;
            }
            ;
            /**
             * @returns number
             */
            timeUpMsecs() {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            timeDownMsecs() {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttBlindConfig(builder) {
                builder.startObject(5);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number relay1
             */
            static addRelay1(builder, relay1) {
                builder.addFieldInt16(0, relay1, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number relay2
             */
            static addRelay2(builder, relay2) {
                builder.addFieldInt16(1, relay2, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eRelayInterlockMode mode
             */
            static addMode(builder, mode) {
                builder.addFieldInt8(2, mode, sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number timeUpMsecs
             */
            static addTimeUpMsecs(builder, timeUpMsecs) {
                builder.addFieldInt32(3, timeUpMsecs, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number timeDownMsecs
             */
            static addTimeDownMsecs(builder, timeDownMsecs) {
                builder.addFieldInt32(4, timeDownMsecs, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtBlindConfig(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtBlindConfig(builder, relay1, relay2, mode, timeUpMsecs, timeDownMsecs) {
                tBlindConfig.starttBlindConfig(builder);
                tBlindConfig.addRelay1(builder, relay1);
                tBlindConfig.addRelay2(builder, relay2);
                tBlindConfig.addMode(builder, mode);
                tBlindConfig.addTimeUpMsecs(builder, timeUpMsecs);
                tBlindConfig.addTimeDownMsecs(builder, timeDownMsecs);
                return tBlindConfig.endtBlindConfig(builder);
            }
        }
        comm.tBlindConfig = tBlindConfig;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tSinglePwmConfig {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tSinglePwmConfig
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmConfig= obj
             * @returns tSinglePwmConfig
             */
            static getRootAstSinglePwmConfig(bb, obj) {
                return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tSinglePwmConfig= obj
             * @returns tSinglePwmConfig
             */
            static getSizePrefixedRootAstSinglePwmConfig(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            pwmFirst() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            pwmLast() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            idOfStandbyController() {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            autoOffMsecs() {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttSinglePwmConfig(builder) {
                builder.startObject(4);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number pwmFirst
             */
            static addPwmFirst(builder, pwmFirst) {
                builder.addFieldInt16(0, pwmFirst, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number pwmLast
             */
            static addPwmLast(builder, pwmLast) {
                builder.addFieldInt16(1, pwmLast, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number idOfStandbyController
             */
            static addIdOfStandbyController(builder, idOfStandbyController) {
                builder.addFieldInt16(2, idOfStandbyController, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number autoOffMsecs
             */
            static addAutoOffMsecs(builder, autoOffMsecs) {
                builder.addFieldInt32(3, autoOffMsecs, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtSinglePwmConfig(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtSinglePwmConfig(builder, pwmFirst, pwmLast, idOfStandbyController, autoOffMsecs) {
                tSinglePwmConfig.starttSinglePwmConfig(builder);
                tSinglePwmConfig.addPwmFirst(builder, pwmFirst);
                tSinglePwmConfig.addPwmLast(builder, pwmLast);
                tSinglePwmConfig.addIdOfStandbyController(builder, idOfStandbyController);
                tSinglePwmConfig.addAutoOffMsecs(builder, autoOffMsecs);
                return tSinglePwmConfig.endtSinglePwmConfig(builder);
            }
        }
        comm.tSinglePwmConfig = tSinglePwmConfig;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tOnOffConfig {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tOnOffConfig
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffConfig= obj
             * @returns tOnOffConfig
             */
            static getRootAstOnOffConfig(bb, obj) {
                return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tOnOffConfig= obj
             * @returns tOnOffConfig
             */
            static getSizePrefixedRootAstOnOffConfig(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            relay() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns number
             */
            autoOffMsecs() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @returns sensact.comm.eOnOffState
             */
            initialState() {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffState.MANUAL_OFF;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttOnOffConfig(builder) {
                builder.startObject(3);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number relay
             */
            static addRelay(builder, relay) {
                builder.addFieldInt16(0, relay, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number autoOffMsecs
             */
            static addAutoOffMsecs(builder, autoOffMsecs) {
                builder.addFieldInt32(1, autoOffMsecs, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.eOnOffState initialState
             */
            static addInitialState(builder, initialState) {
                builder.addFieldInt8(2, initialState, sensact.comm.eOnOffState.MANUAL_OFF);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtOnOffConfig(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtOnOffConfig(builder, relay, autoOffMsecs, initialState) {
                tOnOffConfig.starttOnOffConfig(builder);
                tOnOffConfig.addRelay(builder, relay);
                tOnOffConfig.addAutoOffMsecs(builder, autoOffMsecs);
                tOnOffConfig.addInitialState(builder, initialState);
                return tOnOffConfig.endtOnOffConfig(builder);
            }
        }
        comm.tOnOffConfig = tOnOffConfig;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tConfigWrapper {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tConfigWrapper
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tConfigWrapper= obj
             * @returns tConfigWrapper
             */
            static getRootAstConfigWrapper(bb, obj) {
                return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tConfigWrapper= obj
             * @returns tConfigWrapper
             */
            static getSizePrefixedRootAstConfigWrapper(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns sensact.comm.uConfig
             */
            configType() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : sensact.comm.uConfig.NONE;
            }
            ;
            /**
             * @param flatbuffers.Table obj
             * @returns ?flatbuffers.Table
             */
            config(obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttConfigWrapper(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param sensact.comm.uConfig configType
             */
            static addConfigType(builder, configType) {
                builder.addFieldInt8(0, configType, sensact.comm.uConfig.NONE);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset configOffset
             */
            static addConfig(builder, configOffset) {
                builder.addFieldOffset(1, configOffset, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtConfigWrapper(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtConfigWrapper(builder, configType, configOffset) {
                tConfigWrapper.starttConfigWrapper(builder);
                tConfigWrapper.addConfigType(builder, configType);
                tConfigWrapper.addConfig(builder, configOffset);
                return tConfigWrapper.endtConfigWrapper(builder);
            }
        }
        comm.tConfigWrapper = tConfigWrapper;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
/**
 * @constructor
 */
(function (sensact) {
    var comm;
    (function (comm) {
        class tIoConfig {
            constructor() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns tIoConfig
             */
            __init(i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tIoConfig= obj
             * @returns tIoConfig
             */
            static getRootAstIoConfig(bb, obj) {
                return (obj || new tIoConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param tIoConfig= obj
             * @returns tIoConfig
             */
            static getSizePrefixedRootAstIoConfig(bb, obj) {
                bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
                return (obj || new tIoConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            }
            ;
            /**
             * @returns number
             */
            timestamp() {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param number index
             * @param sensact.comm.tConfigWrapper= obj
             * @returns sensact.comm.tConfigWrapper
             */
            configs(index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new sensact.comm.tConfigWrapper()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            }
            ;
            /**
             * @returns number
             */
            configsLength() {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            static starttIoConfig(builder) {
                builder.startObject(2);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number timestamp
             */
            static addTimestamp(builder, timestamp) {
                builder.addFieldInt32(0, timestamp, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset configsOffset
             */
            static addConfigs(builder, configsOffset) {
                builder.addFieldOffset(1, configsOffset, 0);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            static createConfigsVector(builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            static startConfigsVector(builder, numElems) {
                builder.startVector(4, numElems, 4);
            }
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            static endtIoConfig(builder) {
                var offset = builder.endObject();
                return offset;
            }
            ;
            static createtIoConfig(builder, timestamp, configsOffset) {
                tIoConfig.starttIoConfig(builder);
                tIoConfig.addTimestamp(builder, timestamp);
                tIoConfig.addConfigs(builder, configsOffset);
                return tIoConfig.endtIoConfig(builder);
            }
        }
        comm.tIoConfig = tIoConfig;
    })(comm = sensact.comm || (sensact.comm = {}));
})(sensact = exports.sensact || (exports.sensact = {}));
},{}],2:[function(require,module,exports){
/// @file
/// @addtogroup flatbuffers_javascript_api
/// @{
/// @cond FLATBUFFERS_INTERNAL

/**
 * @fileoverview
 *
 * Need to suppress 'global this' error so the Node.js export line doesn't cause
 * closure compile to error out.
 * @suppress {globalThis}
 */

/**
 * @const
 * @namespace
 */
var flatbuffers = {};

/**
 * @typedef {number}
 */
flatbuffers.Offset;

/**
 * @typedef {{
 *   bb: flatbuffers.ByteBuffer,
 *   bb_pos: number
 * }}
 */
flatbuffers.Table;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_SHORT = 2;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_INT = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.FILE_IDENTIFIER_LENGTH = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZE_PREFIX_LENGTH = 4;

/**
 * @enum {number}
 */
flatbuffers.Encoding = {
  UTF8_BYTES: 1,
  UTF16_STRING: 2
};

/**
 * @type {Int32Array}
 * @const
 */
flatbuffers.int32 = new Int32Array(2);

/**
 * @type {Float32Array}
 * @const
 */
flatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);

/**
 * @type {Float64Array}
 * @const
 */
flatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);

/**
 * @type {boolean}
 * @const
 */
flatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

////////////////////////////////////////////////////////////////////////////////

/**
 * @constructor
 * @param {number} low
 * @param {number} high
 */
flatbuffers.Long = function(low, high) {
  /**
   * @type {number}
   * @const
   */
  this.low = low | 0;

  /**
   * @type {number}
   * @const
   */
  this.high = high | 0;
};

/**
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Long.create = function(low, high) {
  // Special-case zero to avoid GC overhead for default values
  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);
};

/**
 * @returns {number}
 */
flatbuffers.Long.prototype.toFloat64 = function() {
  return (this.low >>> 0) + this.high * 0x100000000;
};

/**
 * @param {flatbuffers.Long} other
 * @returns {boolean}
 */
flatbuffers.Long.prototype.equals = function(other) {
  return this.low == other.low && this.high == other.high;
};

/**
 * @type {!flatbuffers.Long}
 * @const
 */
flatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);

/// @endcond
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a FlatBufferBuilder.
 *
 * @constructor
 * @param {number=} opt_initial_size
 */
flatbuffers.Builder = function(opt_initial_size) {
  if (!opt_initial_size) {
    var initial_size = 1024;
  } else {
    var initial_size = opt_initial_size;
  }

  /**
   * @type {flatbuffers.ByteBuffer}
   * @private
   */
  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);

  /**
   * Remaining space in the ByteBuffer.
   *
   * @type {number}
   * @private
   */
  this.space = initial_size;

  /**
   * Minimum alignment encountered so far.
   *
   * @type {number}
   * @private
   */
  this.minalign = 1;

  /**
   * The vtable for the current table.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtable = null;

  /**
   * The amount of fields we're actually using.
   *
   * @type {number}
   * @private
   */
  this.vtable_in_use = 0;

  /**
   * Whether we are currently serializing a table.
   *
   * @type {boolean}
   * @private
   */
  this.isNested = false;

  /**
   * Starting offset of the current struct/table.
   *
   * @type {number}
   * @private
   */
  this.object_start = 0;

  /**
   * List of offsets of all vtables.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtables = [];

  /**
   * For the current vector being built.
   *
   * @type {number}
   * @private
   */
  this.vector_num_elems = 0;

  /**
   * False omits default values from the serialized data
   *
   * @type {boolean}
   * @private
   */
  this.force_defaults = false;
};

flatbuffers.Builder.prototype.clear = function() {
  this.bb.clear();
  this.space = this.bb.capacity();
  this.minalign = 1;
  this.vtable = null;
  this.vtable_in_use = 0;
  this.isNested = false;
  this.object_start = 0;
  this.vtables = [];
  this.vector_num_elems = 0;
  this.force_defaults = false;
};

/**
 * In order to save space, fields that are set to their default value
 * don't get serialized into the buffer. Forcing defaults provides a
 * way to manually disable this optimization.
 *
 * @param {boolean} forceDefaults true always serializes default values
 */
flatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {
  this.force_defaults = forceDefaults;
};

/**
 * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
 * called finish(). The actual data starts at the ByteBuffer's current position,
 * not necessarily at 0.
 *
 * @returns {flatbuffers.ByteBuffer}
 */
flatbuffers.Builder.prototype.dataBuffer = function() {
  return this.bb;
};

/**
 * Get the bytes representing the FlatBuffer. Only call this after you've
 * called finish().
 *
 * @returns {!Uint8Array}
 */
flatbuffers.Builder.prototype.asUint8Array = function() {
  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Prepare to write an element of `size` after `additional_bytes` have been
 * written, e.g. if you write a string, you need to align such the int length
 * field is aligned to 4 bytes, and the string data follows it directly. If all
 * you need to do is alignment, `additional_bytes` will be 0.
 *
 * @param {number} size This is the of the new element to write
 * @param {number} additional_bytes The padding size
 */
flatbuffers.Builder.prototype.prep = function(size, additional_bytes) {
  // Track the biggest thing we've ever aligned to.
  if (size > this.minalign) {
    this.minalign = size;
  }

  // Find the amount of alignment needed such that `size` is properly
  // aligned after `additional_bytes`
  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);

  // Reallocate the buffer if needed.
  while (this.space < align_size + size + additional_bytes) {
    var old_buf_size = this.bb.capacity();
    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);
    this.space += this.bb.capacity() - old_buf_size;
  }

  this.pad(align_size);
};

/**
 * @param {number} byte_size
 */
flatbuffers.Builder.prototype.pad = function(byte_size) {
  for (var i = 0; i < byte_size; i++) {
    this.bb.writeInt8(--this.space, 0);
  }
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt8 = function(value) {
  this.bb.writeInt8(this.space -= 1, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt16 = function(value) {
  this.bb.writeInt16(this.space -= 2, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt32 = function(value) {
  this.bb.writeInt32(this.space -= 4, value);
};

/**
 * @param {flatbuffers.Long} value
 */
flatbuffers.Builder.prototype.writeInt64 = function(value) {
  this.bb.writeInt64(this.space -= 8, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat32 = function(value) {
  this.bb.writeFloat32(this.space -= 4, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat64 = function(value) {
  this.bb.writeFloat64(this.space -= 8, value);
};
/// @endcond

/**
 * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int8` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt8 = function(value) {
  this.prep(1, 0);
  this.writeInt8(value);
};

/**
 * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int16` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt16 = function(value) {
  this.prep(2, 0);
  this.writeInt16(value);
};

/**
 * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt32 = function(value) {
  this.prep(4, 0);
  this.writeInt32(value);
};

/**
 * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {flatbuffers.Long} value The `int64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt64 = function(value) {
  this.prep(8, 0);
  this.writeInt64(value);
};

/**
 * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat32 = function(value) {
  this.prep(4, 0);
  this.writeFloat32(value);
};

/**
 * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat64 = function(value) {
  this.prep(8, 0);
  this.writeFloat64(value);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt8(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt16(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Long} value
 * @param {flatbuffers.Long} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || !value.equals(defaultValue)) {
    this.addInt64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addOffset(value);
    this.slot(voffset);
  }
};

/**
 * Structs are stored inline, so nothing additional is being added. `d` is always 0.
 *
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {
  if (value != defaultValue) {
    this.nested(value);
    this.slot(voffset);
  }
};

/**
 * Structures are always stored inline, they need to be created right
 * where they're used.  You'll get this assertion failure if you
 * created it elsewhere.
 *
 * @param {flatbuffers.Offset} obj The offset of the created object
 */
flatbuffers.Builder.prototype.nested = function(obj) {
  if (obj != this.offset()) {
    throw new Error('FlatBuffers: struct must be serialized inline.');
  }
};

/**
 * Should not be creating any other object, string or vector
 * while an object is being constructed
 */
flatbuffers.Builder.prototype.notNested = function() {
  if (this.isNested) {
    throw new Error('FlatBuffers: object serialization must not be nested.');
  }
};

/**
 * Set the current vtable at `voffset` to the current location in the buffer.
 *
 * @param {number} voffset
 */
flatbuffers.Builder.prototype.slot = function(voffset) {
  this.vtable[voffset] = this.offset();
};

/**
 * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.
 */
flatbuffers.Builder.prototype.offset = function() {
  return this.bb.capacity() - this.space;
};

/**
 * Doubles the size of the backing ByteBuffer and copies the old data towards
 * the end of the new buffer (since we build the buffer backwards).
 *
 * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data
 * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied
 * to it. The data is located at the end of the buffer.
 *
 * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
 * it a uint8Array we need to suppress the type check:
 * @suppress {checkTypes}
 */
flatbuffers.Builder.growByteBuffer = function(bb) {
  var old_buf_size = bb.capacity();

  // Ensure we don't grow beyond what fits in an int.
  if (old_buf_size & 0xC0000000) {
    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
  }

  var new_buf_size = old_buf_size << 1;
  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);
  nbb.setPosition(new_buf_size - old_buf_size);
  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
  return nbb;
};
/// @endcond

/**
 * Adds on offset, relative to where it will be written.
 *
 * @param {flatbuffers.Offset} offset The offset to add.
 */
flatbuffers.Builder.prototype.addOffset = function(offset) {
  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.
  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Start encoding a new object in the buffer.  Users will not usually need to
 * call this directly. The FlatBuffers compiler will generate helper methods
 * that call this method internally.
 *
 * @param {number} numfields
 */
flatbuffers.Builder.prototype.startObject = function(numfields) {
  this.notNested();
  if (this.vtable == null) {
    this.vtable = [];
  }
  this.vtable_in_use = numfields;
  for (var i = 0; i < numfields; i++) {
    this.vtable[i] = 0; // This will push additional elements as needed
  }
  this.isNested = true;
  this.object_start = this.offset();
};

/**
 * Finish off writing the object that is under construction.
 *
 * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`
 */
flatbuffers.Builder.prototype.endObject = function() {
  if (this.vtable == null || !this.isNested) {
    throw new Error('FlatBuffers: endObject called without startObject');
  }

  this.addInt32(0);
  var vtableloc = this.offset();

  // Trim trailing zeroes.
  var i = this.vtable_in_use - 1;
  for (; i >= 0 && this.vtable[i] == 0; i--) {}
  var trimmed_size = i + 1;

  // Write out the current vtable.
  for (; i >= 0; i--) {
    // Offset relative to the start of the table.
    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
  }

  var standard_fields = 2; // The fields below:
  this.addInt16(vtableloc - this.object_start);
  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;
  this.addInt16(len);

  // Search for an existing vtable that matches the current one.
  var existing_vtable = 0;
  var vt1 = this.space;
outer_loop:
  for (i = 0; i < this.vtables.length; i++) {
    var vt2 = this.bb.capacity() - this.vtables[i];
    if (len == this.bb.readInt16(vt2)) {
      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {
        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
          continue outer_loop;
        }
      }
      existing_vtable = this.vtables[i];
      break;
    }
  }

  if (existing_vtable) {
    // Found a match:
    // Remove the current vtable.
    this.space = this.bb.capacity() - vtableloc;

    // Point table to existing vtable.
    this.bb.writeInt32(this.space, existing_vtable - vtableloc);
  } else {
    // No match:
    // Add the location of the current vtable to the list of vtables.
    this.vtables.push(this.offset());

    // Point table to current vtable.
    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
  }

  this.isNested = false;
  return vtableloc;
};
/// @endcond

/**
 * Finalize a buffer, poiting to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 * @param {boolean=} opt_size_prefix
 */
flatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {
  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;
  if (opt_file_identifier) {
    var file_identifier = opt_file_identifier;
    this.prep(this.minalign, flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);
    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
      throw new Error('FlatBuffers: file identifier must be length ' +
        flatbuffers.FILE_IDENTIFIER_LENGTH);
    }
    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
      this.writeInt8(file_identifier.charCodeAt(i));
    }
  }
  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);
  this.addOffset(root_table);
  if (size_prefix) {
    this.addInt32(this.bb.capacity() - this.space);
  }
  this.bb.setPosition(this.space);
};

/**
 * Finalize a size prefixed buffer, pointing to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 */
flatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {
  this.finish(root_table, opt_file_identifier, true);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * This checks a required field has been set in a given table that has
 * just been constructed.
 *
 * @param {flatbuffers.Offset} table
 * @param {number} field
 */
flatbuffers.Builder.prototype.requiredField = function(table, field) {
  var table_start = this.bb.capacity() - table;
  var vtable_start = table_start - this.bb.readInt32(table_start);
  var ok = this.bb.readInt16(vtable_start + field) != 0;

  // If this fails, the caller will show what field needs to be set.
  if (!ok) {
    throw new Error('FlatBuffers: field ' + field + ' must be set');
  }
};

/**
 * Start a new array/vector of objects.  Users usually will not call
 * this directly. The FlatBuffers compiler will create a start/end
 * method for vector types in generated code.
 *
 * @param {number} elem_size The size of each element in the array
 * @param {number} num_elems The number of elements in the array
 * @param {number} alignment The alignment of the array
 */
flatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {
  this.notNested();
  this.vector_num_elems = num_elems;
  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);
  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
};

/**
 * Finish off the creation of an array and all its elements. The array must be
 * created with `startVector`.
 *
 * @returns {flatbuffers.Offset} The offset at which the newly created array
 * starts.
 */
flatbuffers.Builder.prototype.endVector = function() {
  this.writeInt32(this.vector_num_elems);
  return this.offset();
};
/// @endcond

/**
 * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
 * instead of a string, it is assumed to contain valid UTF-8 encoded data.
 *
 * @param {string|Uint8Array} s The string to encode
 * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts
 */
flatbuffers.Builder.prototype.createString = function(s) {
  if (s instanceof Uint8Array) {
    var utf8 = s;
  } else {
    var utf8 = [];
    var i = 0;

    while (i < s.length) {
      var codePoint;

      // Decode UTF-16
      var a = s.charCodeAt(i++);
      if (a < 0xD800 || a >= 0xDC00) {
        codePoint = a;
      } else {
        var b = s.charCodeAt(i++);
        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);
      }

      // Encode UTF-8
      if (codePoint < 0x80) {
        utf8.push(codePoint);
      } else {
        if (codePoint < 0x800) {
          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);
        } else {
          if (codePoint < 0x10000) {
            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);
          } else {
            utf8.push(
              ((codePoint >> 18) & 0x07) | 0xF0,
              ((codePoint >> 12) & 0x3F) | 0x80);
          }
          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);
        }
        utf8.push((codePoint & 0x3F) | 0x80);
      }
    }
  }

  this.addInt8(0);
  this.startVector(1, utf8.length, 1);
  this.bb.setPosition(this.space -= utf8.length);
  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
    bytes[offset++] = utf8[i];
  }
  return this.endVector();
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Builder.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};
////////////////////////////////////////////////////////////////////////////////
/// @cond FLATBUFFERS_INTERNAL
/**
 * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).
 *
 * @constructor
 * @param {Uint8Array} bytes
 */
flatbuffers.ByteBuffer = function(bytes) {
  /**
   * @type {Uint8Array}
   * @private
   */
  this.bytes_ = bytes;

  /**
   * @type {number}
   * @private
   */
  this.position_ = 0;
};

/**
 * Create and allocate a new ByteBuffer with a given size.
 *
 * @param {number} byte_size
 * @returns {!flatbuffers.ByteBuffer}
 */
flatbuffers.ByteBuffer.allocate = function(byte_size) {
  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));
};

flatbuffers.ByteBuffer.prototype.clear = function() {
  this.position_ = 0;
};

/**
 * Get the underlying `Uint8Array`.
 *
 * @returns {Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.bytes = function() {
  return this.bytes_;
};

/**
 * Get the buffer's position.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.position = function() {
  return this.position_;
};

/**
 * Set the buffer's position.
 *
 * @param {number} position
 */
flatbuffers.ByteBuffer.prototype.setPosition = function(position) {
  this.position_ = position;
};

/**
 * Get the buffer's capacity.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.capacity = function() {
  return this.bytes_.length;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {
  return this.readUint8(offset) << 24 >> 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {
  return this.bytes_[offset];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {
  return this.readUint16(offset) << 16 >> 16;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {
  return this.readInt32(offset) >>> 0;
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {
  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {
  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {
  flatbuffers.int32[0] = this.readInt32(offset);
  return flatbuffers.float32[0];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {
  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);
  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
  return flatbuffers.float64[0];
};

/**
 * @param {number} offset
 * @param {number|boolean} value
 */
flatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {
  this.bytes_[offset] = /** @type {number} */(value);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {
  this.bytes_[offset] = value;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
  this.bytes_[offset + 2] = value >> 16;
  this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
    this.bytes_[offset + 2] = value >> 16;
    this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {
  this.writeInt32(offset, value.low);
  this.writeInt32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {
    this.writeUint32(offset, value.low);
    this.writeUint32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {
  flatbuffers.float32[0] = value;
  this.writeInt32(offset, flatbuffers.int32[0]);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {
  flatbuffers.float64[0] = value;
  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);
  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);
};

/**
 * Return the file identifier.   Behavior is undefined for FlatBuffers whose
 * schema does not include a file_identifier (likely points at padding or the
 * start of a the root vtable).
 * @returns {string}
 */
flatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {
  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error(
        'FlatBuffers: ByteBuffer is too short to contain an identifier.');
  }
  var result = "";
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    result += String.fromCharCode(
        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));
  }
  return result;
};

/**
 * Look up a field in the vtable, return an offset into the object, or 0 if the
 * field is not present.
 *
 * @param {number} bb_pos
 * @param {number} vtable_offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {
  var vtable = bb_pos - this.readInt32(bb_pos);
  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
};

/**
 * Initialize any Table-derived type to point to the union at the given offset.
 *
 * @param {flatbuffers.Table} t
 * @param {number} offset
 * @returns {flatbuffers.Table}
 */
flatbuffers.ByteBuffer.prototype.__union = function(t, offset) {
  t.bb_pos = offset + this.readInt32(offset);
  t.bb = this;
  return t;
};

/**
 * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
 * This allocates a new string and converts to wide chars upon each access.
 *
 * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as
 * the "optionalEncoding" argument. This is useful for avoiding conversion to
 * and from UTF-16 when the data will just be packaged back up in another
 * FlatBuffer later on.
 *
 * @param {number} offset
 * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING
 * @returns {string|!Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {
  offset += this.readInt32(offset);

  var length = this.readInt32(offset);
  var result = '';
  var i = 0;

  offset += flatbuffers.SIZEOF_INT;

  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {
    return this.bytes_.subarray(offset, offset + length);
  }

  while (i < length) {
    var codePoint;

    // Decode UTF-8
    var a = this.readUint8(offset + i++);
    if (a < 0xC0) {
      codePoint = a;
    } else {
      var b = this.readUint8(offset + i++);
      if (a < 0xE0) {
        codePoint =
          ((a & 0x1F) << 6) |
          (b & 0x3F);
      } else {
        var c = this.readUint8(offset + i++);
        if (a < 0xF0) {
          codePoint =
            ((a & 0x0F) << 12) |
            ((b & 0x3F) << 6) |
            (c & 0x3F);
        } else {
          var d = this.readUint8(offset + i++);
          codePoint =
            ((a & 0x07) << 18) |
            ((b & 0x3F) << 12) |
            ((c & 0x3F) << 6) |
            (d & 0x3F);
        }
      }
    }

    // Encode UTF-16
    if (codePoint < 0x10000) {
      result += String.fromCharCode(codePoint);
    } else {
      codePoint -= 0x10000;
      result += String.fromCharCode(
        (codePoint >> 10) + 0xD800,
        (codePoint & ((1 << 10) - 1)) + 0xDC00);
    }
  }

  return result;
};

/**
 * Retrieve the relative offset stored at "offset"
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__indirect = function(offset) {
  return offset + this.readInt32(offset);
};

/**
 * Get the start of data of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector = function(offset) {
  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length
};

/**
 * Get the length of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {
  return this.readInt32(offset + this.readInt32(offset));
};

/**
 * @param {string} ident
 * @returns {boolean}
 */
flatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {
  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error('FlatBuffers: file identifier must be length ' +
                    flatbuffers.FILE_IDENTIFIER_LENGTH);
  }
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {
      return false;
    }
  }
  return true;
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};

// Exports for Node.js and RequireJS
this.flatbuffers = flatbuffers;

/// @endcond
/// @}

},{}],3:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigScreenController = exports.UPDATE_EACH_INTERVAL = exports.DE_de = void 0;
const ScreenController_1 = require("./ScreenController");
const Utils_1 = require("./Utils");
const flatbuffers_1 = require("flatbuffers"); // located in node_modules
const C = __importStar(require("../generated/webui_core_comm_generated"));
const ConfigWidgets_1 = require("./ConfigWidgets");
const DummyData_1 = require("./DummyData");
var M = C.sensact.comm;
exports.DE_de = new Intl.NumberFormat('de-DE');
exports.UPDATE_EACH_INTERVAL = 2;
var ConfigWidgetTypes;
(function (ConfigWidgetTypes) {
    ConfigWidgetTypes[ConfigWidgetTypes["Blind"] = 0] = "Blind";
    ConfigWidgetTypes[ConfigWidgetTypes["OnOff"] = 1] = "OnOff";
    ConfigWidgetTypes[ConfigWidgetTypes["SinglePwm"] = 2] = "SinglePwm";
})(ConfigWidgetTypes || (ConfigWidgetTypes = {}));
class ConfigScreenController extends ScreenController_1.ScreenController {
    constructor(appManagement, container) {
        super(appManagement, container);
        this.widgets = new Array();
    }
    addWidgets(config) {
        var _a;
        for (let i = 0; i < config.configsLength(); i++) {
            let w = null;
            switch ((_a = config.configs(i)) === null || _a === void 0 ? void 0 : _a.configType()) {
                case C.sensact.comm.uConfig.tBlindConfig:
                    w = new ConfigWidgets_1.BlindsConfigWidget(this);
                    break;
                case C.sensact.comm.uConfig.tOnOffConfig:
                    w = new ConfigWidgets_1.OnOffConfigWidget(this);
                    break;
                case C.sensact.comm.uConfig.tSinglePwmConfig:
                    w = new ConfigWidgets_1.SinglePwmConfigWidget(this);
                    break;
            }
            if (!w)
                throw new Error("if(!w)");
            this.widgets.push(w);
            w.SetIndex(i);
        }
        this.redraw();
    }
    onCreate() { }
    onRestart() {
    }
    onStop() {
    }
    onFirstStart() {
        let top = Utils_1.$.Html(this.container, "div", ["top"]);
        this.typeSelector = Utils_1.$.LabelSpanSelectFillEnum(top, "Select a Widget", ConfigWidgetTypes, 0);
        Utils_1.$.Html(top, "button", ["styled"], "Add", ["type", "button"]).onclick = (e) => this.AddPressed();
        Utils_1.$.Html(top, "button", ["styled"], "Save", ["type", "button"]).onclick = (e) => this.SavePressed();
        ;
        this.divItemlist = Utils_1.$.Html(this.container, "div", ["itemlist"]);
        let xhr = new XMLHttpRequest;
        xhr.responseType = "arraybuffer";
        xhr.onerror = (e) => {
            this.createWidgets(DummyData_1.DummyGenerator.CreateIoConfig());
        };
        xhr.onload = (e) => {
            if (xhr.status < 400) {
                let arrayBuffer = xhr.response;
                let buf = new flatbuffers_1.flatbuffers.ByteBuffer(new Uint8Array(arrayBuffer));
                let cfg = C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);
                this.createWidgets(cfg);
            }
            else
                this.createWidgets(DummyData_1.DummyGenerator.CreateIoConfig());
        };
        xhr.open("GET", "/iocfg", true);
        xhr.send( /*body is ignored with get*/);
    }
    createWidgets(config) {
        var _a;
        for (let i = 0; i < config.configsLength(); i++) {
            let w = null;
            switch ((_a = config.configs(i)) === null || _a === void 0 ? void 0 : _a.configType()) {
                case C.sensact.comm.uConfig.tBlindConfig:
                    w = new ConfigWidgets_1.BlindsConfigWidget(this);
                    break;
                case C.sensact.comm.uConfig.tOnOffConfig:
                    w = new ConfigWidgets_1.OnOffConfigWidget(this);
                    break;
                case C.sensact.comm.uConfig.tSinglePwmConfig:
                    w = new ConfigWidgets_1.SinglePwmConfigWidget(this);
                    break;
            }
            if (!w)
                throw new Error("!w");
            w.SetData(config.configs(i));
            w.SetIndex(i);
            w.renderWidget(this.divItemlist, i == 0, i + 1 == config.configsLength());
            this.widgets.push(w);
        }
        this.redraw();
    }
    SavePressed() {
        let builder = new flatbuffers_1.flatbuffers.Builder(1024);
        let configs_vect = [];
        for (let i = 0; i < this.widgets.length; i++) {
            this.widgets[i].fillFlatbuffer(builder, configs_vect);
        }
        let configs = M.tIoConfig.createConfigsVector(builder, configs_vect);
        let ioConfig = M.tIoConfig.createtIoConfig(builder, 0, configs);
        builder.finish(ioConfig);
        let xhr = new XMLHttpRequest;
        xhr.open("PUT", "/iocmd", true);
        xhr.send(builder.asUint8Array());
    }
    AddPressed() {
        let w = null;
        switch (Number.parseInt(this.typeSelector.value)) {
            case ConfigWidgetTypes.Blind:
                w = new ConfigWidgets_1.BlindsConfigWidget(this);
                break;
            case ConfigWidgetTypes.OnOff:
                w = new ConfigWidgets_1.OnOffConfigWidget(this);
                break;
            case ConfigWidgetTypes.SinglePwm:
                w = new ConfigWidgets_1.SinglePwmConfigWidget(this);
                break;
        }
        if (!w)
            throw new Error("if(!w)");
        w.renderWidget(this.divItemlist, false, false); //muss hier gerendert werden, damit die Elemente exisitieren, die beim redraw->CopyDataFromHtmlToModel() ausgewertet werden
        this.widgets.push(w);
        this.redraw();
    }
    redraw() {
        for (let i = 0; i < this.widgets.length; i++) {
            this.widgets[i].CopyDataFromHtmlToModel();
        }
        this.divItemlist.innerText = "";
        for (let i = 0; i < this.widgets.length; i++) {
            this.widgets[i].SetIndex(i);
            this.widgets[i].renderWidget(this.divItemlist, i == 0, i + 1 == this.widgets.length);
        }
    }
    moveUp(i) {
        let w = this.widgets[i - 1];
        this.widgets[i - 1] = this.widgets[i];
        this.widgets[i] = w;
        this.redraw();
    }
    moveDown(i) {
        let w = this.widgets[i];
        this.widgets[i] = this.widgets[i + 1];
        this.widgets[i + 1] = w;
        this.redraw();
    }
    delete(i) {
        this.widgets.splice(i, 1);
        this.redraw();
    }
}
exports.ConfigScreenController = ConfigScreenController;
},{"../generated/webui_core_comm_generated":1,"./ConfigWidgets":4,"./DummyData":6,"./ScreenController":8,"./Utils":9,"flatbuffers":2}],4:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SinglePwmConfigWidget = exports.BlindsConfigWidget = exports.OnOffConfigWidget = exports.ConfigWidget = void 0;
const C = __importStar(require("../generated/webui_core_comm_generated"));
const Utils_1 = require("./Utils");
var M = C.sensact.comm;
class ConfigWidget {
    constructor(manager) {
        this.manager = manager;
        this.index = 0;
    }
    renderWidget(container, isFirst, isLast) {
        let wCont = Utils_1.$.Html(container, "div");
        this.renderWidgetCoreForm(wCont);
        if (!isFirst)
            Utils_1.$.Html(wCont, "button", ["styled"], "▲", ["type", "button"]).onclick = (e) => this.UpPressed();
        if (!isLast)
            Utils_1.$.Html(wCont, "button", ["styled"], "▼", ["type", "button"]).onclick = (e) => this.DownPressed();
        ;
        let btnDelete = Utils_1.$.Html(wCont, "button", ["styled"], "", ["type", "button"]);
        btnDelete.onclick = (e) => this.DeletePressed();
        Utils_1.$.SvgIcon(btnDelete, "bin2", ["smallicon"]);
    }
    SetIndex(i) {
        this.index = i;
    }
    UpPressed() {
        this.manager.moveUp(this.index);
    }
    DownPressed() {
        this.manager.moveDown(this.index);
    }
    DeletePressed() {
        this.manager.delete(this.index);
    }
}
exports.ConfigWidget = ConfigWidget;
class OnOffConfigWidget extends ConfigWidget {
    constructor() {
        super(...arguments);
        this.relay = 0;
        this.initialState = M.eOnOffState.AUTO_OFF;
        this.autoOffMs = 60000;
    }
    renderWidgetCoreForm(container) {
        Utils_1.$.Html(container, "h3", [], "OnOff");
        this.inpRelay = Utils_1.$.LabelSpanInput(container, "Relay", this.relay, 0, 65535);
        this.inpInitialState = Utils_1.$.LabelSpanSelectFillEnum(container, "Initial State", M.eOnOffState, this.initialState);
        this.inpAutoOffMs = Utils_1.$.LabelSpanInput(container, "AutoOff [ms]", this.autoOffMs, 0, 100000);
    }
    SetData(config) {
        if (config.configType() != M.uConfig.tOnOffConfig)
            return;
        let x = config.config(new M.tOnOffConfig());
        if (!(x !== null && x !== undefined))
            return;
        this.relay = x.relay();
        this.initialState = x.initialState();
        this.autoOffMs = x.autoOffMsecs();
    }
    CopyDataFromHtmlToModel() {
        this.relay = this.inpRelay.valueAsNumber;
        this.initialState = Number.parseInt(this.inpInitialState.value);
        this.autoOffMs = this.inpAutoOffMs.valueAsNumber;
    }
    fillFlatbuffer(builder, vect) {
        let x = M.tOnOffConfig.createtOnOffConfig(builder, this.relay, this.initialState, this.autoOffMs);
        vect.push(x);
        return;
    }
}
exports.OnOffConfigWidget = OnOffConfigWidget;
class BlindsConfigWidget extends ConfigWidget {
    constructor() {
        super(...arguments);
        this.relay1 = 0;
        this.relay2 = 0;
        this.mode = M.eRelayInterlockMode.RELAY1_DOWN__RELAY2_UP;
        this.up_msec = 60000;
        this.down_msec = 60000;
    }
    renderWidgetCoreForm(wCont) {
        Utils_1.$.Html(wCont, "h3", [], "Blind");
        this.inpRelay1 = Utils_1.$.LabelSpanInput(wCont, "Relay1", this.relay1, 0, 65535);
        this.inpRelay2 = Utils_1.$.LabelSpanInput(wCont, "Relay2", this.relay2, 0, 65535);
        this.inpMode = Utils_1.$.LabelSpanSelectFillEnum(wCont, "Mode", M.eRelayInterlockMode, this.mode);
        this.inpUp = Utils_1.$.LabelSpanInput(wCont, "Up [ms]", this.up_msec, 1, 100000);
        this.inpDown = Utils_1.$.LabelSpanInput(wCont, "Down [ms]", this.down_msec, 1, 100000);
    }
    SetData(config) {
        if (config.configType() != M.uConfig.tBlindConfig)
            return;
        let x = config.config(new M.tBlindConfig());
        if (!(x !== null && x !== undefined))
            return;
        this.relay1 = x.relay1();
        this.relay2 = x.relay2();
        this.mode = x.mode();
        this.up_msec = x.timeUpMsecs();
        this.down_msec = x.timeDownMsecs();
    }
    CopyDataFromHtmlToModel() {
        this.relay1 = this.inpRelay1.valueAsNumber;
        this.relay2 = this.inpRelay2.valueAsNumber;
        this.mode = Number.parseInt(this.inpMode.value);
        this.up_msec = this.inpUp.valueAsNumber;
        this.down_msec = this.inpDown.valueAsNumber;
    }
    fillFlatbuffer(builder, vect) {
        let x = M.tBlindConfig.createtBlindConfig(builder, this.relay1, this.relay2, this.mode, this.up_msec, this.down_msec);
        vect.push(x);
        return;
    }
}
exports.BlindsConfigWidget = BlindsConfigWidget;
class SinglePwmConfigWidget extends ConfigWidget {
    constructor() {
        super(...arguments);
        this.pwmFirst = 0;
        this.pwmLast = 0;
        this.standbyControllerId = 0;
        this.autoOffMs = 60000;
    }
    renderWidgetCoreForm(wCont) {
        Utils_1.$.Html(wCont, "h3", [], "SinglePwm");
        this.inpPwmFirst = Utils_1.$.LabelSpanInput(wCont, "pwm_first", this.pwmFirst, 0, 65535);
        this.inpPwmLast = Utils_1.$.LabelSpanInput(wCont, "pwm_last", this.pwmLast, 0, 65535);
        this.inpStandbyControllerId = Utils_1.$.LabelSpanInput(wCont, "stndby", this.standbyControllerId, 0, 65535);
        this.inpAutoOffMs = Utils_1.$.LabelSpanInput(wCont, "AutoOff [ms]", this.autoOffMs, 0, 100000);
    }
    SetData(config) {
        if (config.configType() != M.uConfig.tSinglePwmConfig)
            return;
        let x = config.config(new M.tSinglePwmConfig());
        if (!(x !== null && x !== undefined))
            return;
        this.pwmFirst = x.pwmFirst();
        this.pwmLast = x.pwmLast();
        this.standbyControllerId = x.idOfStandbyController();
        this.autoOffMs = x.autoOffMsecs();
    }
    CopyDataFromHtmlToModel() {
        this.pwmFirst = this.inpPwmFirst.valueAsNumber;
        this.pwmLast = this.inpPwmLast.valueAsNumber;
        this.standbyControllerId = this.inpStandbyControllerId.valueAsNumber;
        this.autoOffMs = this.inpAutoOffMs.valueAsNumber;
    }
    fillFlatbuffer(builder, vect) {
        let x = M.tSinglePwmConfig.createtSinglePwmConfig(builder, this.pwmFirst, this.pwmLast, this.standbyControllerId, this.autoOffMs);
        vect.push(x);
        return;
    }
}
exports.SinglePwmConfigWidget = SinglePwmConfigWidget;
},{"../generated/webui_core_comm_generated":1,"./Utils":9}],5:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlScreenController = exports.UPDATE_EACH_INTERVAL = exports.DE_de = void 0;
const ScreenController_1 = require("./ScreenController");
const Widgets_1 = require("./Widgets");
const Utils_1 = require("./Utils");
const flatbuffers_1 = require("flatbuffers"); // located in node_modules
const C = __importStar(require("../generated/webui_core_comm_generated"));
const DummyData_1 = require("./DummyData");
exports.DE_de = new Intl.NumberFormat('de-DE');
exports.UPDATE_EACH_INTERVAL = 2;
class ControlScreenController extends ScreenController_1.ScreenController {
    constructor(appManagement, container) {
        super(appManagement, container);
        this.timeOfLastprocessIoCtrl = 0;
        this.widgets = new Map();
    }
    createWidgets(config) {
        var _a;
        let id = 1;
        for (let i = 0; i < config.configsLength(); i++) {
            let w;
            let widgetContainer = Utils_1.$.Html(this.container, "div", []);
            switch ((_a = config.configs(i)) === null || _a === void 0 ? void 0 : _a.configType()) {
                case C.sensact.comm.uConfig.tBlindConfig:
                    w = new Widgets_1.BlindsWidget(this, id);
                    break;
                case C.sensact.comm.uConfig.tOnOffConfig:
                    w = new Widgets_1.OnOffWidget(this, id);
                    break;
                case C.sensact.comm.uConfig.tSinglePwmConfig:
                    w = new Widgets_1.SinglePwmWidget(this, id);
                    break;
            }
            if (w !== null && w !== undefined) {
                this.widgets.set(id, w);
                w.renderWidgetAndHookHandlers(widgetContainer);
            }
            id++;
        }
    }
    http_put_iocmd(buf) {
        this.timeOfLastprocessIoCtrl = Date.now() + 60000; //um http_get_ioctrl zunächst mal zu vermeiden
        let xhr = new XMLHttpRequest;
        xhr.onerror = (e) => { console.log("Fehler beim XMLHttpRequest!"); };
        xhr.open("PUT", "/iocmd", true);
        xhr.responseType = "arraybuffer";
        xhr.onload = (e) => this.processIoState(xhr);
        xhr.send(buf);
    }
    http_get_iocmd() {
        if (Date.now() - this.timeOfLastprocessIoCtrl < 800) {
            return;
        }
        let xhr = new XMLHttpRequest;
        xhr.onerror = (e) => { console.log("Fehler beim XMLHttpRequest!"); };
        xhr.open("GET", "/iocmd", true);
        xhr.responseType = "arraybuffer";
        xhr.onload = (e) => this.processIoState(xhr);
        xhr.send();
    }
    processIoState(xhr) {
        this.timeOfLastprocessIoCtrl = Date.now();
        if (xhr.responseType != "arraybuffer") {
            console.error("No arraybuffer returned!");
            return;
        }
        let buf = new flatbuffers_1.flatbuffers.ByteBuffer(new Uint8Array(xhr.response));
        let r = C.sensact.comm.tState.getRootAstState(buf);
        for (let i = 0; i < r.statesLength(); i++) {
            let appId = r.states(i).applicationId();
            let widget = this.widgets.get(appId);
            widget === null || widget === void 0 ? void 0 : widget.processIoState(r, i);
        }
    }
    onCreate() { }
    onRestart() {
        this.timer = window.setInterval(() => { this.http_get_iocmd(); }, 1000);
    }
    onStop() {
        window.clearInterval(this.timer);
    }
    onFirstStart() {
        this.timer = window.setInterval(() => { this.http_get_iocmd(); }, 1000);
        let xhr = new XMLHttpRequest;
        xhr.responseType = "arraybuffer";
        xhr.onerror = (e) => {
            this.createWidgets(DummyData_1.DummyGenerator.CreateIoConfig());
        };
        xhr.onload = (e) => {
            if (xhr.status < 400) {
                let arrayBuffer = xhr.response;
                let buf = new flatbuffers_1.flatbuffers.ByteBuffer(new Uint8Array(arrayBuffer));
                let cfg = C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);
                this.createWidgets(cfg);
            }
            else
                this.createWidgets(DummyData_1.DummyGenerator.CreateIoConfig());
        };
        xhr.open("GET", "/iocfg", true);
        xhr.send( /*body is ignored with get*/);
    }
}
exports.ControlScreenController = ControlScreenController;
},{"../generated/webui_core_comm_generated":1,"./DummyData":6,"./ScreenController":8,"./Utils":9,"./Widgets":10,"flatbuffers":2}],6:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DummyGenerator = void 0;
const flatbuffers_1 = require("flatbuffers"); // located in node_modules
const C = __importStar(require("../generated/webui_core_comm_generated"));
class DummyGenerator {
    static CreateIoConfig() {
        let builder = new flatbuffers_1.flatbuffers.Builder(1024);
        let cfg1 = C.sensact.comm.tBlindConfig.createtBlindConfig(builder, 1, 2, C.sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN, 30000, 30000);
        let wCfg1 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tBlindConfig, cfg1);
        let cfg2 = C.sensact.comm.tSinglePwmConfig.createtSinglePwmConfig(builder, 3, 3, 3, 20000);
        let wCfg2 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tSinglePwmConfig, cfg2);
        let cfg3 = C.sensact.comm.tOnOffConfig.createtOnOffConfig(builder, 4, 20000, C.sensact.comm.eOnOffState.AUTO_OFF);
        let wCfg3 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tOnOffConfig, cfg3);
        let cfg_vect = C.sensact.comm.tIoConfig.createConfigsVector(builder, [wCfg1, wCfg2, wCfg3]);
        let cfg = C.sensact.comm.tIoConfig.createtIoConfig(builder, 0, cfg_vect);
        builder.finish(cfg);
        let bytes = builder.asUint8Array();
        let buf = new flatbuffers_1.flatbuffers.ByteBuffer(bytes);
        return C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);
    }
}
exports.DummyGenerator = DummyGenerator;
},{"../generated/webui_core_comm_generated":1,"flatbuffers":2}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ControlScreenController_1 = require("./ControlScreenController");
const ConfigScreenController_1 = require("./ConfigScreenController");
const ScreenController_1 = require("./ScreenController");
const Utils_1 = require("./Utils");
class AppController {
    constructor() {
        this.screenControllers = [];
        this.activeControllerIndex = 0;
    }
    setActiveScreen(newIndex) {
        if (newIndex == this.activeControllerIndex)
            return;
        this.screenControllers.forEach((controller, i) => {
            if (i == newIndex) {
                controller.showDIV();
                if (controller.State == ScreenController_1.ControllerState.CREATED) {
                    controller.onFirstStart();
                    controller.State = ScreenController_1.ControllerState.STARTED;
                }
                else {
                    controller.onRestart();
                    controller.State = ScreenController_1.ControllerState.STARTED;
                }
            }
            else {
                controller.hideDIV();
                if (controller.State == ScreenController_1.ControllerState.STARTED) {
                    controller.onStop();
                    controller.State = ScreenController_1.ControllerState.STOPPED;
                }
            }
        });
        this.activeControllerIndex = newIndex;
    }
    startup() {
        let header = document.querySelector("header");
        Utils_1.$.Html(header, "button", ["small"], "CMD", ["type", "button"]).onclick = (e) => this.setActiveScreen(0);
        Utils_1.$.Html(header, "button", ["small"], "CFG", ["type", "button"]).onclick = (e) => this.setActiveScreen(1);
        this.screenControllers.push(new ControlScreenController_1.ControlScreenController(this, Utils_1.$.HtmlAfter(header, "main", ["ControlScreen"])));
        this.screenControllers.push(new ConfigScreenController_1.ConfigScreenController(this, Utils_1.$.HtmlAfter(header, "main", ["ConfigScreen"])));
        this.setActiveScreen(0);
    }
}
let app;
document.addEventListener("DOMContentLoaded", (e) => {
    app = new AppController();
    app.startup();
});
},{"./ConfigScreenController":3,"./ControlScreenController":5,"./ScreenController":8,"./Utils":9}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenController = exports.ControllerState = void 0;
var ControllerState;
(function (ControllerState) {
    ControllerState[ControllerState["CREATED"] = 0] = "CREATED";
    ControllerState[ControllerState["STARTED"] = 1] = "STARTED";
    ControllerState[ControllerState["STOPPED"] = 2] = "STOPPED";
})(ControllerState = exports.ControllerState || (exports.ControllerState = {}));
class ScreenController {
    constructor(appManagement, container) {
        this.appManagement = appManagement;
        this.container = container;
        this.hideDIV();
        this.state = ControllerState.CREATED;
    }
    get ElementId() { return this.container.id; }
    get State() { return this.state; }
    set State(value) { this.state = value; }
    showDIV() {
        this.container.style.display = "flex";
    }
    hideDIV() {
        this.container.style.display = "none";
    }
}
exports.ScreenController = ScreenController;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$ = exports.StringNumberTuple = exports.Utils = void 0;
class Utils {
    static EventCoordinatesInSVG(evt, element, positionRatio = 1) {
        let rect = element.getBoundingClientRect();
        return { x: (evt.clientX - rect.left) / positionRatio, y: (evt.clientY - rect.top) / positionRatio };
    }
}
exports.Utils = Utils;
class StringNumberTuple {
    constructor(s, n) {
        this.s = s;
        this.n = n;
    }
}
exports.StringNumberTuple = StringNumberTuple;
class $ {
    static Svg(parent, type, classes, attributes) {
        return parent.appendChild($.Elem($.SVGNS, type, classes, "", attributes));
    }
    static SvgIcon(parent, iconname, classes = []) {
        let svg = $.Svg(parent, "svg", classes, ["icon", "icon-" + iconname]);
        let use = $.Svg(svg, "use", [], []);
        use.setAttributeNS(this.XLINKNS, "href", "#icon-" + iconname);
        parent.appendChild(svg);
        return svg;
    }
    static ColorNumColor2ColorDomString(num) {
        let str = num.toString(16);
        while (str.length < 6)
            str = "0" + num;
        return "#" + str;
    }
    static ColorDomString2ColorNum(colorString) {
        return parseInt(colorString.substring(1), 16);
    }
    static Html(parent, type, classes, textContent, attributes) {
        return parent.appendChild($.Elem($.HTMLNS, type, classes, textContent, attributes));
    }
    static HtmlAfter(previous, type, classes, textContent, attributes) {
        return previous.parentElement.insertBefore($.Elem($.HTMLNS, type, classes, textContent, attributes), previous.nextSibling);
    }
    static HtmlAsFirstChild(parent, type, classes, textContent, attributes) {
        if (parent.firstChild)
            return parent.insertBefore($.Elem($.HTMLNS, type, classes, textContent, attributes), parent.firstChild);
        else
            return parent.appendChild($.Elem($.HTMLNS, type, classes, textContent, attributes));
    }
    static Elem(ns, type, classes = [], textContent = "", attributes = []) {
        let element = document.createElementNS(ns, type);
        if (classes) {
            for (const clazz of classes) {
                element.classList.add(clazz);
            }
        }
        let i;
        for (i = 0; i < attributes.length; i += 2) {
            element.setAttribute(attributes[i], attributes[i + 1]);
        }
        if (textContent) {
            element.textContent = textContent;
        }
        return element;
    }
    static InputNumber(table, min, max, key, cfg) {
        let value = 0;
        if (cfg != null) {
            for (const e of cfg) {
                if (e.key == key && !isNaN(e.value)) {
                    value = e.value;
                    break;
                }
            }
        }
        let tr = $.Html(table, "tr", ["develop-propertygrid-tr"]);
        $.Html(tr, "td", ["develop-propertygrid-td"], key);
        let inputContainer = $.Html(tr, "td", ["develop-propertygrid-td"]);
        return $.Html(inputContainer, "input", [], "", ["type", "number", "min", "" + Math.round(min), "max", "" + Math.round(max), "value", "" + Math.round(value),]);
    }
    static LabelSpanInput(parent, label, value, min, max) {
        let lbl = $.Html(parent, "label");
        $.Html(lbl, "span", [], label);
        return $.Html(lbl, "input", [], "", ["type", "number", "value", value + "", "min", min + "", "max", max + ""]);
    }
    static LabelSpanSelectFillEnum(parent, label, enumeration, defaultEnum) {
        const names = Object.keys(enumeration).filter(k => typeof enumeration[k] === "number");
        const numbers = names.map(k => enumeration[k]);
        let lbl = $.Html(parent, "label");
        $.Html(lbl, "span", [], label);
        let select = $.Html(lbl, "select");
        for (let i = 0; i < names.length; i++) {
            let option = $.Html(select, "option", [], names[i], ["value", numbers[i]]);
            if (i == defaultEnum)
                option.selected = true;
        }
        return select;
    }
    static InputSelect(table, displayValueAndKeyvalues, key, cfg) {
        let value = 0;
        if (cfg != null) {
            for (const e of cfg) {
                if (e.key == key && !isNaN(e.value)) {
                    value = e.value;
                    break;
                }
            }
        }
        let tr = $.Html(table, "tr", ["develop-propertygrid-tr"]);
        $.Html(tr, "td", ["develop-propertygrid-td"], key);
        let inputContainer = $.Html(tr, "td", ["develop-propertygrid-td"]);
        let select = $.Html(inputContainer, "select");
        for (let i = 0; i < displayValueAndKeyvalues.length; i++) {
            let option = $.Html(select, "option", [], displayValueAndKeyvalues[i].s, ["value", "" + displayValueAndKeyvalues[i].n]);
            if (i == value) {
                option.setAttribute("selected", "");
            }
        }
        return select;
    }
    static InputColor(table, key, cfg) {
        let value = "#ff0000";
        if (cfg != null) {
            for (const e of cfg) {
                if (e.key == key) {
                    value = e.value;
                    break;
                }
            }
        }
        let tr = $.Html(table, "tr", ["develop-propertygrid-tr"]);
        $.Html(tr, "td", ["develop-propertygrid-td"], key);
        let inputContainer = $.Html(tr, "td", ["develop-propertygrid-td"]);
        return $.Html(inputContainer, "input", [], "", ["type", "color", "value", value]);
    }
}
exports.$ = $;
$.SVGNS = "http://www.w3.org/2000/svg";
$.XLINKNS = "http://www.w3.org/1999/xlink";
$.HTMLNS = "http://www.w3.org/1999/xhtml";
},{}],10:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnOffWidget = exports.SinglePwmWidget = exports.BlindsWidget = exports.Widget = exports.UPDATE_EACH_INTERVAL = void 0;
const flatbuffers_1 = require("flatbuffers"); // located in node_modules
const C = __importStar(require("../generated/webui_core_comm_generated"));
const Utils_1 = require("./Utils");
exports.UPDATE_EACH_INTERVAL = 2;
const KELVIN_MAX = 6500;
const KELVIN_MIN = 2700;
class Widget {
    constructor(manager, id) {
        this.manager = manager;
        this.id = id;
    }
}
exports.Widget = Widget;
class BlindsWidget extends Widget {
    constructor(m, id) {
        super(m, id);
    }
    processIoState(r, i) {
        var _a;
        if (((_a = r.states(i)) === null || _a === void 0 ? void 0 : _a.stateType()) != C.sensact.comm.uState.tBlindState) {
            return;
        }
        let state = r.states(i).state(new C.sensact.comm.tBlindState()).state();
        //let position = r.states(i)!.state(new C.sensact.comm.tBlindState())!.position();
        switch (state) {
            case C.sensact.comm.eBlindState.DOWN:
                this.butBlindsDown.style.color = "green";
                this.butBlindsUp.style.color = "black";
                break;
            case C.sensact.comm.eBlindState.UP:
                this.butBlindsDown.style.color = "black";
                this.butBlindsUp.style.color = "green";
                break;
            default:
                this.butBlindsDown.style.color = "black";
                this.butBlindsUp.style.color = "black";
                break;
        }
    }
    blindEventBuilder(e) {
        let builder = new flatbuffers_1.flatbuffers.Builder(1024);
        let evt = C.sensact.comm.tBlindCommand.createtBlindCommand(builder, e);
        let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tBlindCommand, this.id, evt);
        builder.finish(ioCmd);
        return builder.asUint8Array();
    }
    renderWidgetAndHookHandlers(container) {
        this.butBlindsUp = Utils_1.$.Html(container, "button", ["updown"], "🢁"); //<button id="blindsUp" class="updown" style="flex: 1 1 0;">&#129153;</button>
        this.butBlindsUp.style.flex = "1 1 0";
        this.butBlindsStop = Utils_1.$.Html(container, "button"); //<button id="blindsStop" style="flex: 1 1 0;"><svg class="icon"><use style="fill:black;" xlink:href="#icon-blinds"></use></svg></button>
        this.butBlindsStop.style.flex = "1 1 0";
        Utils_1.$.SvgIcon(this.butBlindsStop, "blinds").style.fill = "black";
        this.butBlindsDown = Utils_1.$.Html(container, "button", ["updown"], "🢃"); //<button id="blindsDown" class="updown" style="flex: 1 1 0;">&#129155;</button>
        this.butBlindsDown.style.flex = "1 1 0";
        this.butBlindsUp.onclick = (e) => {
            this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.UP));
        };
        this.butBlindsStop.onclick = (e) => {
            this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.STOP));
        };
        this.butBlindsDown.onclick = (e) => {
            this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.DOWN));
        };
    }
}
exports.BlindsWidget = BlindsWidget;
class SinglePwmWidget extends Widget {
    constructor(manager, id) {
        super(manager, id);
        this.firstCallOfProcessIoCtrl = true;
    }
    processIoState(r, i) {
        var _a;
        if (((_a = r.states(i)) === null || _a === void 0 ? void 0 : _a.stateType()) != C.sensact.comm.uState.tSinglePwmState) {
            return;
        }
        let on = r.states(i).state(new C.sensact.comm.tSinglePwmState()).on();
        let intensity_0_100 = r.states(i).state(new C.sensact.comm.tSinglePwmState()).intensity0100();
        this.butSpotsOnOff.style.backgroundColor = on ? "green" : "grey";
        if (this.firstCallOfProcessIoCtrl) {
            this.spotsPicker.color.set(intensity_0_100);
            this.firstCallOfProcessIoCtrl = false;
        }
    }
    renderWidgetAndHookHandlers(container) {
        let pickerContainer = Utils_1.$.Html(container, "div", []);
        pickerContainer.style.flex = "1 1 0";
        pickerContainer.style.alignSelf = "center";
        this.butSpotsOnOff = Utils_1.$.Html(container, "button", ["onoff"]); //<button id="blindsUp" class="updown" style="flex: 1 1 0;">&#129153;</button>
        this.butSpotsOnOff.style.flex = "0 0 0";
        Utils_1.$.SvgIcon(this.butSpotsOnOff, "spot").style.fill = "black";
        let width = Math.min(400, 0.9 * pickerContainer.offsetWidth);
        this.spotsPicker = new iro.ColorPicker(pickerContainer, {
            width: width,
            layoutDirection: 'vertical',
            color: "#000",
            layout: [
                {
                    component: iro.ui.Slider,
                    options: {
                        sliderType: 'value',
                    }
                },
            ]
        });
        this.spotsPicker.on('input:change', (color, changes) => {
            let intensity0_100 = color.value;
            console.info(intensity0_100);
            let builder = new flatbuffers_1.flatbuffers.Builder(1024);
            let evt = C.sensact.comm.tSinglePwmCommand.createtSinglePwmCommand(builder, C.sensact.comm.eSinglePwmCommand.CHANGE_INTENSITY, intensity0_100);
            let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tSinglePwmCommand, this.id, evt);
            builder.finish(ioCmd);
            this.manager.http_put_iocmd(builder.asUint8Array());
        });
        this.butSpotsOnOff.onclick = (e) => {
            let builder = new flatbuffers_1.flatbuffers.Builder(1024);
            C.sensact.comm.tSinglePwmCommand.starttSinglePwmCommand(builder);
            C.sensact.comm.tSinglePwmCommand.addCmd(builder, C.sensact.comm.eSinglePwmCommand.TOGGLE);
            let evt = C.sensact.comm.tSinglePwmCommand.endtSinglePwmCommand(builder);
            let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tSinglePwmCommand, this.id, evt);
            builder.finish(ioCmd);
            this.manager.http_put_iocmd(builder.asUint8Array());
        };
    }
}
exports.SinglePwmWidget = SinglePwmWidget;
class OnOffWidget extends Widget {
    constructor(manager, id) {
        super(manager, id);
        this.state = C.sensact.comm.eOnOffState.AUTO_OFF;
    }
    updateUI(newState) {
        this.state = newState;
        switch (this.state) {
            case C.sensact.comm.eOnOffState.AUTO_OFF:
                this.selector.style.left = this.butOn.clientWidth + "px";
                this.selector.style.width = this.butAuto.clientWidth + "px";
                this.selector.innerHTML = "AUTO";
                this.selector.style.backgroundColor = "black";
                this.selector.style.color = "white";
                this.selector.style.visibility = "visible";
                break;
            case C.sensact.comm.eOnOffState.AUTO_ON:
                this.selector.style.left = this.butOn.clientWidth + "px";
                this.selector.style.width = this.butAuto.clientWidth + "px";
                this.selector.innerHTML = "AUTO";
                this.selector.style.backgroundColor = "green";
                this.selector.style.color = "black";
                this.selector.style.visibility = "visible";
                break;
            case C.sensact.comm.eOnOffState.MANUAL_ON:
                this.selector.style.left = "0px";
                this.selector.style.width = this.butOn.clientWidth + "px";
                this.selector.innerHTML = "ON";
                this.selector.style.backgroundColor = "green";
                this.selector.style.color = "black";
                this.selector.style.visibility = "visible";
                break;
            case C.sensact.comm.eOnOffState.MANUAL_OFF:
                this.selector.style.left = this.butOn.clientWidth + this.butAuto.clientWidth + 1 + "px";
                this.selector.style.width = this.butOff.clientWidth + "px";
                this.selector.innerHTML = "OFF";
                this.selector.style.backgroundColor = "black";
                this.selector.style.color = "white";
                this.selector.style.visibility = "visible";
                break;
        }
    }
    processIoState(r, i) {
        var _a;
        if (((_a = r.states(i)) === null || _a === void 0 ? void 0 : _a.stateType()) != C.sensact.comm.uState.tOnOffState) {
            return;
        }
        let state = r.states(i).state(new C.sensact.comm.tOnOffState()).state();
        this.updateUI(state);
    }
    renderWidgetAndHookHandlers(container) {
        let subcontainer = Utils_1.$.Html(container, "div"); //one single element
        subcontainer.style.flex = "1 1 0";
        subcontainer.style.position = "relative";
        let itemscontainer = Utils_1.$.Html(subcontainer, "div", ["switch_3_ways_container"]); //one single element//noiw, a container for the items; with flex layout
        itemscontainer.style.display = "flex";
        //itemscontainer.style.flexFlow="row nowrap";//default!
        //itemscontainer.style.justifyContent="flex-start";//default
        //itemscontainer.style.alignItems="stretch";//default
        this.butOn = Utils_1.$.Html(itemscontainer, "div", ["switch_3_ways_item"]);
        Utils_1.$.Html(this.butOn, "span", [], "On");
        this.butAuto = Utils_1.$.Html(itemscontainer, "div", ["switch_3_ways_item"]);
        Utils_1.$.Html(this.butAuto, "span", [], "Auto");
        this.butOff = Utils_1.$.Html(itemscontainer, "div", ["switch_3_ways_item"], "Off");
        Utils_1.$.Html(this.butOff, "span", [], "Off");
        this.selector = Utils_1.$.Html(subcontainer, "div", ["switch_3_ways_selector"]);
        this.selector.style.visibility = "hidden";
        Utils_1.$.Html(this.selector, "span", [], "");
        this.butOn.onclick = (e) => {
            let builder = new flatbuffers_1.flatbuffers.Builder(1024);
            let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.ON, 0);
            let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);
            builder.finish(ioCmd);
            let buf = builder.asUint8Array();
            this.manager.http_put_iocmd(buf);
        };
        this.butAuto.onclick = (e) => {
            let builder = new flatbuffers_1.flatbuffers.Builder(1024);
            let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.AUTO, 0);
            let ioCtrl = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);
            builder.finish(ioCtrl);
            let buf = builder.asUint8Array();
            this.manager.http_put_iocmd(buf);
        };
        this.butOff.onclick = (e) => {
            let builder = new flatbuffers_1.flatbuffers.Builder(1024);
            let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.OFF, 0);
            let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);
            builder.finish(ioCmd);
            let buf = builder.asUint8Array();
            this.manager.http_put_iocmd(buf);
        };
    }
}
exports.OnOffWidget = OnOffWidget;
},{"../generated/webui_core_comm_generated":1,"./Utils":9,"flatbuffers":2}]},{},[7])

//# sourceMappingURL=bundle.js.map
