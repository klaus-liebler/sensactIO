{"version":3,"sources":["node_modules/browser-pack/_prelude.js","generated/webui_core_comm_generated.ts","node_modules/flatbuffers/js/flatbuffers.js","webui/ConfigScreenController.ts","webui/ConfigWidgets.ts","webui/ControlScreenController.ts","webui/DummyData.ts","webui/Main.ts","webui/ScreenController.ts","webui/Utils.ts","webui/Widgets.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eBlindState{\r\n  STOP= 0,\r\n  UP= 1,\r\n  DOWN= 2,\r\n  PREPARE= 3\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eBlindCommand{\r\n  STOP= 0,\r\n  UP= 1,\r\n  DOWN= 2\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eSinglePwmCommand{\r\n  TOGGLE= 0,\r\n  CHANGE_INTENSITY= 1\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eOnOffCommand{\r\n  ON= 0,\r\n  AUTO= 1,\r\n  OFF= 2,\r\n  TRIGGER= 3,\r\n  TRIGGER_MSECS= 4\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eOnOffState{\r\n  MANUAL_OFF= 0,\r\n  MANUAL_ON= 1,\r\n  AUTO_OFF= 2,\r\n  AUTO_ON= 3\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum uState{\r\n  NONE= 0,\r\n  tBlindState= 1,\r\n  tSinglePwmState= 2,\r\n  tOnOffState= 3\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum uCommand{\r\n  NONE= 0,\r\n  tBlindCommand= 1,\r\n  tSinglePwmCommand= 2,\r\n  tOnOffCommand= 3\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum eRelayInterlockMode{\r\n  RELAY1_UP__RELAY2_DOWN= 0,\r\n  RELAY1_DOWN__RELAY2_UP= 1,\r\n  RELAY1_POWER__RELAY2_UP= 2,\r\n  RELAY1_POWER__RELAY2_DOWN= 3,\r\n  RELAY1_UP__RELAY2_POWER= 4,\r\n  RELAY1_DOWN__RELAY2_POWER= 5\r\n}};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace sensact.comm{\r\nexport enum uConfig{\r\n  NONE= 0,\r\n  tBlindConfig= 1,\r\n  tSinglePwmConfig= 2,\r\n  tOnOffConfig= 3\r\n}};\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tBlindState {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tBlindState\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tBlindState {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindState= obj\r\n * @returns tBlindState\r\n */\r\nstatic getRootAstBlindState(bb:flatbuffers.ByteBuffer, obj?:tBlindState):tBlindState {\r\n  return (obj || new tBlindState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindState= obj\r\n * @returns tBlindState\r\n */\r\nstatic getSizePrefixedRootAstBlindState(bb:flatbuffers.ByteBuffer, obj?:tBlindState):tBlindState {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tBlindState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nposition():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eBlindState\r\n */\r\nstate():sensact.comm.eBlindState {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eBlindState.STOP;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttBlindState(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number position\r\n */\r\nstatic addPosition(builder:flatbuffers.Builder, position:number) {\r\n  builder.addFieldInt16(0, position, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eBlindState state\r\n */\r\nstatic addState(builder:flatbuffers.Builder, state:sensact.comm.eBlindState) {\r\n  builder.addFieldInt8(1, state, sensact.comm.eBlindState.STOP);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtBlindState(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtBlindState(builder:flatbuffers.Builder, position:number, state:sensact.comm.eBlindState):flatbuffers.Offset {\r\n  tBlindState.starttBlindState(builder);\r\n  tBlindState.addPosition(builder, position);\r\n  tBlindState.addState(builder, state);\r\n  return tBlindState.endtBlindState(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tSinglePwmState {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tSinglePwmState\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tSinglePwmState {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmState= obj\r\n * @returns tSinglePwmState\r\n */\r\nstatic getRootAstSinglePwmState(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmState):tSinglePwmState {\r\n  return (obj || new tSinglePwmState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmState= obj\r\n * @returns tSinglePwmState\r\n */\r\nstatic getSizePrefixedRootAstSinglePwmState(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmState):tSinglePwmState {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tSinglePwmState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nintensity0100():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns boolean\r\n */\r\non():boolean {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttSinglePwmState(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number intensity0100\r\n */\r\nstatic addIntensity0100(builder:flatbuffers.Builder, intensity0100:number) {\r\n  builder.addFieldInt8(0, intensity0100, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param boolean on\r\n */\r\nstatic addOn(builder:flatbuffers.Builder, on:boolean) {\r\n  builder.addFieldInt8(1, +on, +false);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtSinglePwmState(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtSinglePwmState(builder:flatbuffers.Builder, intensity0100:number, on:boolean):flatbuffers.Offset {\r\n  tSinglePwmState.starttSinglePwmState(builder);\r\n  tSinglePwmState.addIntensity0100(builder, intensity0100);\r\n  tSinglePwmState.addOn(builder, on);\r\n  return tSinglePwmState.endtSinglePwmState(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tOnOffState {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tOnOffState\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tOnOffState {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffState= obj\r\n * @returns tOnOffState\r\n */\r\nstatic getRootAstOnOffState(bb:flatbuffers.ByteBuffer, obj?:tOnOffState):tOnOffState {\r\n  return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffState= obj\r\n * @returns tOnOffState\r\n */\r\nstatic getSizePrefixedRootAstOnOffState(bb:flatbuffers.ByteBuffer, obj?:tOnOffState):tOnOffState {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eOnOffState\r\n */\r\nstate():sensact.comm.eOnOffState {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffState.MANUAL_OFF;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttOnOffState(builder:flatbuffers.Builder) {\r\n  builder.startObject(1);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eOnOffState state\r\n */\r\nstatic addState(builder:flatbuffers.Builder, state:sensact.comm.eOnOffState) {\r\n  builder.addFieldInt8(0, state, sensact.comm.eOnOffState.MANUAL_OFF);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtOnOffState(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtOnOffState(builder:flatbuffers.Builder, state:sensact.comm.eOnOffState):flatbuffers.Offset {\r\n  tOnOffState.starttOnOffState(builder);\r\n  tOnOffState.addState(builder, state);\r\n  return tOnOffState.endtOnOffState(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tStateWrapper {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tStateWrapper\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tStateWrapper {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tStateWrapper= obj\r\n * @returns tStateWrapper\r\n */\r\nstatic getRootAstStateWrapper(bb:flatbuffers.ByteBuffer, obj?:tStateWrapper):tStateWrapper {\r\n  return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tStateWrapper= obj\r\n * @returns tStateWrapper\r\n */\r\nstatic getSizePrefixedRootAstStateWrapper(bb:flatbuffers.ByteBuffer, obj?:tStateWrapper):tStateWrapper {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\napplicationId():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.uState\r\n */\r\nstateType():sensact.comm.uState {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : sensact.comm.uState.NONE;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Table obj\r\n * @returns ?flatbuffers.Table\r\n */\r\nstate<T extends flatbuffers.Table>(obj:T):T|null {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttStateWrapper(builder:flatbuffers.Builder) {\r\n  builder.startObject(3);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number applicationId\r\n */\r\nstatic addApplicationId(builder:flatbuffers.Builder, applicationId:number) {\r\n  builder.addFieldInt32(0, applicationId, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.uState stateType\r\n */\r\nstatic addStateType(builder:flatbuffers.Builder, stateType:sensact.comm.uState) {\r\n  builder.addFieldInt8(1, stateType, sensact.comm.uState.NONE);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param flatbuffers.Offset stateOffset\r\n */\r\nstatic addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(2, stateOffset, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtStateWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtStateWrapper(builder:flatbuffers.Builder, applicationId:number, stateType:sensact.comm.uState, stateOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  tStateWrapper.starttStateWrapper(builder);\r\n  tStateWrapper.addApplicationId(builder, applicationId);\r\n  tStateWrapper.addStateType(builder, stateType);\r\n  tStateWrapper.addState(builder, stateOffset);\r\n  return tStateWrapper.endtStateWrapper(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tState {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tState\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tState {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tState= obj\r\n * @returns tState\r\n */\r\nstatic getRootAstState(bb:flatbuffers.ByteBuffer, obj?:tState):tState {\r\n  return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tState= obj\r\n * @returns tState\r\n */\r\nstatic getSizePrefixedRootAstState(bb:flatbuffers.ByteBuffer, obj?:tState):tState {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\ntimestamp():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param number index\r\n * @param sensact.comm.tStateWrapper= obj\r\n * @returns sensact.comm.tStateWrapper\r\n */\r\nstates(index: number, obj?:sensact.comm.tStateWrapper):sensact.comm.tStateWrapper|null {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? (obj || new sensact.comm.tStateWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nstatesLength():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttState(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number timestamp\r\n */\r\nstatic addTimestamp(builder:flatbuffers.Builder, timestamp:number) {\r\n  builder.addFieldInt32(0, timestamp, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param flatbuffers.Offset statesOffset\r\n */\r\nstatic addStates(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(1, statesOffset, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param Array.<flatbuffers.Offset> data\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic createStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\r\n  builder.startVector(4, data.length, 4);\r\n  for (var i = data.length - 1; i >= 0; i--) {\r\n    builder.addOffset(data[i]);\r\n  }\r\n  return builder.endVector();\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number numElems\r\n */\r\nstatic startStatesVector(builder:flatbuffers.Builder, numElems:number) {\r\n  builder.startVector(4, numElems, 4);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtState(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtState(builder:flatbuffers.Builder, timestamp:number, statesOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  tState.starttState(builder);\r\n  tState.addTimestamp(builder, timestamp);\r\n  tState.addStates(builder, statesOffset);\r\n  return tState.endtState(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tBlindCommand {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tBlindCommand\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tBlindCommand {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindCommand= obj\r\n * @returns tBlindCommand\r\n */\r\nstatic getRootAstBlindCommand(bb:flatbuffers.ByteBuffer, obj?:tBlindCommand):tBlindCommand {\r\n  return (obj || new tBlindCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindCommand= obj\r\n * @returns tBlindCommand\r\n */\r\nstatic getSizePrefixedRootAstBlindCommand(bb:flatbuffers.ByteBuffer, obj?:tBlindCommand):tBlindCommand {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tBlindCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eBlindCommand\r\n */\r\ncmd():sensact.comm.eBlindCommand {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eBlindCommand.STOP;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttBlindCommand(builder:flatbuffers.Builder) {\r\n  builder.startObject(1);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eBlindCommand cmd\r\n */\r\nstatic addCmd(builder:flatbuffers.Builder, cmd:sensact.comm.eBlindCommand) {\r\n  builder.addFieldInt8(0, cmd, sensact.comm.eBlindCommand.STOP);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtBlindCommand(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtBlindCommand(builder:flatbuffers.Builder, cmd:sensact.comm.eBlindCommand):flatbuffers.Offset {\r\n  tBlindCommand.starttBlindCommand(builder);\r\n  tBlindCommand.addCmd(builder, cmd);\r\n  return tBlindCommand.endtBlindCommand(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tSinglePwmCommand {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tSinglePwmCommand\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tSinglePwmCommand {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmCommand= obj\r\n * @returns tSinglePwmCommand\r\n */\r\nstatic getRootAstSinglePwmCommand(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmCommand):tSinglePwmCommand {\r\n  return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmCommand= obj\r\n * @returns tSinglePwmCommand\r\n */\r\nstatic getSizePrefixedRootAstSinglePwmCommand(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmCommand):tSinglePwmCommand {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eSinglePwmCommand\r\n */\r\ncmd():sensact.comm.eSinglePwmCommand {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eSinglePwmCommand.TOGGLE;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nintensity0100():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttSinglePwmCommand(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eSinglePwmCommand cmd\r\n */\r\nstatic addCmd(builder:flatbuffers.Builder, cmd:sensact.comm.eSinglePwmCommand) {\r\n  builder.addFieldInt8(0, cmd, sensact.comm.eSinglePwmCommand.TOGGLE);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number intensity0100\r\n */\r\nstatic addIntensity0100(builder:flatbuffers.Builder, intensity0100:number) {\r\n  builder.addFieldInt8(1, intensity0100, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtSinglePwmCommand(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtSinglePwmCommand(builder:flatbuffers.Builder, cmd:sensact.comm.eSinglePwmCommand, intensity0100:number):flatbuffers.Offset {\r\n  tSinglePwmCommand.starttSinglePwmCommand(builder);\r\n  tSinglePwmCommand.addCmd(builder, cmd);\r\n  tSinglePwmCommand.addIntensity0100(builder, intensity0100);\r\n  return tSinglePwmCommand.endtSinglePwmCommand(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tOnOffCommand {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tOnOffCommand\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tOnOffCommand {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffCommand= obj\r\n * @returns tOnOffCommand\r\n */\r\nstatic getRootAstOnOffCommand(bb:flatbuffers.ByteBuffer, obj?:tOnOffCommand):tOnOffCommand {\r\n  return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffCommand= obj\r\n * @returns tOnOffCommand\r\n */\r\nstatic getSizePrefixedRootAstOnOffCommand(bb:flatbuffers.ByteBuffer, obj?:tOnOffCommand):tOnOffCommand {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eOnOffCommand\r\n */\r\ncmd():sensact.comm.eOnOffCommand {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffCommand.ON;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nmsecs():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttOnOffCommand(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eOnOffCommand cmd\r\n */\r\nstatic addCmd(builder:flatbuffers.Builder, cmd:sensact.comm.eOnOffCommand) {\r\n  builder.addFieldInt8(0, cmd, sensact.comm.eOnOffCommand.ON);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number msecs\r\n */\r\nstatic addMsecs(builder:flatbuffers.Builder, msecs:number) {\r\n  builder.addFieldInt32(1, msecs, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtOnOffCommand(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtOnOffCommand(builder:flatbuffers.Builder, cmd:sensact.comm.eOnOffCommand, msecs:number):flatbuffers.Offset {\r\n  tOnOffCommand.starttOnOffCommand(builder);\r\n  tOnOffCommand.addCmd(builder, cmd);\r\n  tOnOffCommand.addMsecs(builder, msecs);\r\n  return tOnOffCommand.endtOnOffCommand(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tCommand {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tCommand\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tCommand {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tCommand= obj\r\n * @returns tCommand\r\n */\r\nstatic getRootAstCommand(bb:flatbuffers.ByteBuffer, obj?:tCommand):tCommand {\r\n  return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tCommand= obj\r\n * @returns tCommand\r\n */\r\nstatic getSizePrefixedRootAstCommand(bb:flatbuffers.ByteBuffer, obj?:tCommand):tCommand {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\napplicationId():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.uCommand\r\n */\r\ncommandType():sensact.comm.uCommand {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : sensact.comm.uCommand.NONE;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Table obj\r\n * @returns ?flatbuffers.Table\r\n */\r\ncommand<T extends flatbuffers.Table>(obj:T):T|null {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttCommand(builder:flatbuffers.Builder) {\r\n  builder.startObject(3);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number applicationId\r\n */\r\nstatic addApplicationId(builder:flatbuffers.Builder, applicationId:number) {\r\n  builder.addFieldInt32(0, applicationId, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.uCommand commandType\r\n */\r\nstatic addCommandType(builder:flatbuffers.Builder, commandType:sensact.comm.uCommand) {\r\n  builder.addFieldInt8(1, commandType, sensact.comm.uCommand.NONE);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param flatbuffers.Offset commandOffset\r\n */\r\nstatic addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(2, commandOffset, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtCommand(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtCommand(builder:flatbuffers.Builder, applicationId:number, commandType:sensact.comm.uCommand, commandOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  tCommand.starttCommand(builder);\r\n  tCommand.addApplicationId(builder, applicationId);\r\n  tCommand.addCommandType(builder, commandType);\r\n  tCommand.addCommand(builder, commandOffset);\r\n  return tCommand.endtCommand(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tBlindConfig {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tBlindConfig\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tBlindConfig {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindConfig= obj\r\n * @returns tBlindConfig\r\n */\r\nstatic getRootAstBlindConfig(bb:flatbuffers.ByteBuffer, obj?:tBlindConfig):tBlindConfig {\r\n  return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tBlindConfig= obj\r\n * @returns tBlindConfig\r\n */\r\nstatic getSizePrefixedRootAstBlindConfig(bb:flatbuffers.ByteBuffer, obj?:tBlindConfig):tBlindConfig {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nrelay1():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nrelay2():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eRelayInterlockMode\r\n */\r\nmode():sensact.comm.eRelayInterlockMode {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\ntimeUpMsecs():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 10);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\ntimeDownMsecs():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 12);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttBlindConfig(builder:flatbuffers.Builder) {\r\n  builder.startObject(5);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number relay1\r\n */\r\nstatic addRelay1(builder:flatbuffers.Builder, relay1:number) {\r\n  builder.addFieldInt16(0, relay1, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number relay2\r\n */\r\nstatic addRelay2(builder:flatbuffers.Builder, relay2:number) {\r\n  builder.addFieldInt16(1, relay2, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eRelayInterlockMode mode\r\n */\r\nstatic addMode(builder:flatbuffers.Builder, mode:sensact.comm.eRelayInterlockMode) {\r\n  builder.addFieldInt8(2, mode, sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number timeUpMsecs\r\n */\r\nstatic addTimeUpMsecs(builder:flatbuffers.Builder, timeUpMsecs:number) {\r\n  builder.addFieldInt32(3, timeUpMsecs, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number timeDownMsecs\r\n */\r\nstatic addTimeDownMsecs(builder:flatbuffers.Builder, timeDownMsecs:number) {\r\n  builder.addFieldInt32(4, timeDownMsecs, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtBlindConfig(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtBlindConfig(builder:flatbuffers.Builder, relay1:number, relay2:number, mode:sensact.comm.eRelayInterlockMode, timeUpMsecs:number, timeDownMsecs:number):flatbuffers.Offset {\r\n  tBlindConfig.starttBlindConfig(builder);\r\n  tBlindConfig.addRelay1(builder, relay1);\r\n  tBlindConfig.addRelay2(builder, relay2);\r\n  tBlindConfig.addMode(builder, mode);\r\n  tBlindConfig.addTimeUpMsecs(builder, timeUpMsecs);\r\n  tBlindConfig.addTimeDownMsecs(builder, timeDownMsecs);\r\n  return tBlindConfig.endtBlindConfig(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tSinglePwmConfig {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tSinglePwmConfig\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tSinglePwmConfig {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmConfig= obj\r\n * @returns tSinglePwmConfig\r\n */\r\nstatic getRootAstSinglePwmConfig(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmConfig):tSinglePwmConfig {\r\n  return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tSinglePwmConfig= obj\r\n * @returns tSinglePwmConfig\r\n */\r\nstatic getSizePrefixedRootAstSinglePwmConfig(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmConfig):tSinglePwmConfig {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\npwmFirst():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\npwmLast():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nidOfStandbyController():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nautoOffMsecs():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 10);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttSinglePwmConfig(builder:flatbuffers.Builder) {\r\n  builder.startObject(4);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number pwmFirst\r\n */\r\nstatic addPwmFirst(builder:flatbuffers.Builder, pwmFirst:number) {\r\n  builder.addFieldInt16(0, pwmFirst, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number pwmLast\r\n */\r\nstatic addPwmLast(builder:flatbuffers.Builder, pwmLast:number) {\r\n  builder.addFieldInt16(1, pwmLast, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number idOfStandbyController\r\n */\r\nstatic addIdOfStandbyController(builder:flatbuffers.Builder, idOfStandbyController:number) {\r\n  builder.addFieldInt16(2, idOfStandbyController, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number autoOffMsecs\r\n */\r\nstatic addAutoOffMsecs(builder:flatbuffers.Builder, autoOffMsecs:number) {\r\n  builder.addFieldInt32(3, autoOffMsecs, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtSinglePwmConfig(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtSinglePwmConfig(builder:flatbuffers.Builder, pwmFirst:number, pwmLast:number, idOfStandbyController:number, autoOffMsecs:number):flatbuffers.Offset {\r\n  tSinglePwmConfig.starttSinglePwmConfig(builder);\r\n  tSinglePwmConfig.addPwmFirst(builder, pwmFirst);\r\n  tSinglePwmConfig.addPwmLast(builder, pwmLast);\r\n  tSinglePwmConfig.addIdOfStandbyController(builder, idOfStandbyController);\r\n  tSinglePwmConfig.addAutoOffMsecs(builder, autoOffMsecs);\r\n  return tSinglePwmConfig.endtSinglePwmConfig(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tOnOffConfig {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tOnOffConfig\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tOnOffConfig {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffConfig= obj\r\n * @returns tOnOffConfig\r\n */\r\nstatic getRootAstOnOffConfig(bb:flatbuffers.ByteBuffer, obj?:tOnOffConfig):tOnOffConfig {\r\n  return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tOnOffConfig= obj\r\n * @returns tOnOffConfig\r\n */\r\nstatic getSizePrefixedRootAstOnOffConfig(bb:flatbuffers.ByteBuffer, obj?:tOnOffConfig):tOnOffConfig {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nrelay():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nautoOffMsecs():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.eOnOffState\r\n */\r\ninitialState():sensact.comm.eOnOffState {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : sensact.comm.eOnOffState.MANUAL_OFF;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttOnOffConfig(builder:flatbuffers.Builder) {\r\n  builder.startObject(3);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number relay\r\n */\r\nstatic addRelay(builder:flatbuffers.Builder, relay:number) {\r\n  builder.addFieldInt16(0, relay, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number autoOffMsecs\r\n */\r\nstatic addAutoOffMsecs(builder:flatbuffers.Builder, autoOffMsecs:number) {\r\n  builder.addFieldInt32(1, autoOffMsecs, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.eOnOffState initialState\r\n */\r\nstatic addInitialState(builder:flatbuffers.Builder, initialState:sensact.comm.eOnOffState) {\r\n  builder.addFieldInt8(2, initialState, sensact.comm.eOnOffState.MANUAL_OFF);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtOnOffConfig(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtOnOffConfig(builder:flatbuffers.Builder, relay:number, autoOffMsecs:number, initialState:sensact.comm.eOnOffState):flatbuffers.Offset {\r\n  tOnOffConfig.starttOnOffConfig(builder);\r\n  tOnOffConfig.addRelay(builder, relay);\r\n  tOnOffConfig.addAutoOffMsecs(builder, autoOffMsecs);\r\n  tOnOffConfig.addInitialState(builder, initialState);\r\n  return tOnOffConfig.endtOnOffConfig(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tConfigWrapper {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tConfigWrapper\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tConfigWrapper {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tConfigWrapper= obj\r\n * @returns tConfigWrapper\r\n */\r\nstatic getRootAstConfigWrapper(bb:flatbuffers.ByteBuffer, obj?:tConfigWrapper):tConfigWrapper {\r\n  return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tConfigWrapper= obj\r\n * @returns tConfigWrapper\r\n */\r\nstatic getSizePrefixedRootAstConfigWrapper(bb:flatbuffers.ByteBuffer, obj?:tConfigWrapper):tConfigWrapper {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns sensact.comm.uConfig\r\n */\r\nconfigType():sensact.comm.uConfig {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : sensact.comm.uConfig.NONE;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Table obj\r\n * @returns ?flatbuffers.Table\r\n */\r\nconfig<T extends flatbuffers.Table>(obj:T):T|null {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttConfigWrapper(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param sensact.comm.uConfig configType\r\n */\r\nstatic addConfigType(builder:flatbuffers.Builder, configType:sensact.comm.uConfig) {\r\n  builder.addFieldInt8(0, configType, sensact.comm.uConfig.NONE);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param flatbuffers.Offset configOffset\r\n */\r\nstatic addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(1, configOffset, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtConfigWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtConfigWrapper(builder:flatbuffers.Builder, configType:sensact.comm.uConfig, configOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  tConfigWrapper.starttConfigWrapper(builder);\r\n  tConfigWrapper.addConfigType(builder, configType);\r\n  tConfigWrapper.addConfig(builder, configOffset);\r\n  return tConfigWrapper.endtConfigWrapper(builder);\r\n}\r\n}\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace sensact.comm{\r\nexport class tIoConfig {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n  bb_pos:number = 0;\r\n/**\r\n * @param number i\r\n * @param flatbuffers.ByteBuffer bb\r\n * @returns tIoConfig\r\n */\r\n__init(i:number, bb:flatbuffers.ByteBuffer):tIoConfig {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tIoConfig= obj\r\n * @returns tIoConfig\r\n */\r\nstatic getRootAstIoConfig(bb:flatbuffers.ByteBuffer, obj?:tIoConfig):tIoConfig {\r\n  return (obj || new tIoConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.ByteBuffer bb\r\n * @param tIoConfig= obj\r\n * @returns tIoConfig\r\n */\r\nstatic getSizePrefixedRootAstIoConfig(bb:flatbuffers.ByteBuffer, obj?:tIoConfig):tIoConfig {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new tIoConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\ntimestamp():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param number index\r\n * @param sensact.comm.tConfigWrapper= obj\r\n * @returns sensact.comm.tConfigWrapper\r\n */\r\nconfigs(index: number, obj?:sensact.comm.tConfigWrapper):sensact.comm.tConfigWrapper|null {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? (obj || new sensact.comm.tConfigWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n};\r\n\r\n/**\r\n * @returns number\r\n */\r\nconfigsLength():number {\r\n  var offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n */\r\nstatic starttIoConfig(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number timestamp\r\n */\r\nstatic addTimestamp(builder:flatbuffers.Builder, timestamp:number) {\r\n  builder.addFieldInt32(0, timestamp, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param flatbuffers.Offset configsOffset\r\n */\r\nstatic addConfigs(builder:flatbuffers.Builder, configsOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(1, configsOffset, 0);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param Array.<flatbuffers.Offset> data\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic createConfigsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\r\n  builder.startVector(4, data.length, 4);\r\n  for (var i = data.length - 1; i >= 0; i--) {\r\n    builder.addOffset(data[i]);\r\n  }\r\n  return builder.endVector();\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @param number numElems\r\n */\r\nstatic startConfigsVector(builder:flatbuffers.Builder, numElems:number) {\r\n  builder.startVector(4, numElems, 4);\r\n};\r\n\r\n/**\r\n * @param flatbuffers.Builder builder\r\n * @returns flatbuffers.Offset\r\n */\r\nstatic endtIoConfig(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  var offset = builder.endObject();\r\n  return offset;\r\n};\r\n\r\nstatic createtIoConfig(builder:flatbuffers.Builder, timestamp:number, configsOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  tIoConfig.starttIoConfig(builder);\r\n  tIoConfig.addTimestamp(builder, timestamp);\r\n  tIoConfig.addConfigs(builder, configsOffset);\r\n  return tIoConfig.endtIoConfig(builder);\r\n}\r\n}\r\n}\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nthis.flatbuffers = flatbuffers;\n\n/// @endcond\n/// @}\n","import { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement, ConfigWidgetManager } from \"./Interfaces\";\r\nimport { $ } from \"./Utils\";\r\nimport { flatbuffers } from 'flatbuffers'; // located in node_modules\r\nimport * as C from '../generated/webui_core_comm_generated';\r\nimport { BlindsConfigWidget, ConfigWidget, OnOffConfigWidget, SinglePwmConfigWidget } from \"./ConfigWidgets\";\r\nimport { DummyGenerator } from \"./DummyData\";\r\nimport M = C.sensact.comm;\r\n\r\nexport let DE_de = new Intl.NumberFormat('de-DE');\r\nexport const UPDATE_EACH_INTERVAL = 2;\r\n\r\nenum ConfigWidgetTypes {\r\n  Blind,\r\n  OnOff,\r\n  SinglePwm,\r\n\r\n}\r\n\r\nexport class ConfigScreenController extends ScreenController implements ConfigWidgetManager {\r\n  private widgets: Array<ConfigWidget> = new Array<ConfigWidget>();\r\n  private divItemlist!: HTMLDivElement;\r\n  private typeSelector!: HTMLSelectElement;\r\n\r\n  public addWidgets(config: C.sensact.comm.tIoConfig) {\r\n    for (let i = 0; i < config.configsLength(); i++) {\r\n      let w: ConfigWidget | null = null;\r\n\r\n      switch (config.configs(i)?.configType()) {\r\n        case C.sensact.comm.uConfig.tBlindConfig:\r\n          w = new BlindsConfigWidget(this);\r\n          break;\r\n        case C.sensact.comm.uConfig.tOnOffConfig:\r\n          w = new OnOffConfigWidget(this);\r\n          break;\r\n        case C.sensact.comm.uConfig.tSinglePwmConfig:\r\n          w = new SinglePwmConfigWidget(this);\r\n          break;\r\n      }\r\n      if (!w) throw new Error(\"if(!w)\");\r\n\r\n      this.widgets.push(w);\r\n      w.SetIndex(i);\r\n    }\r\n    this.redraw();\r\n  }\r\n\r\n\r\n\r\n  public onCreate(): void { }\r\n\r\n  public onRestart(): void {\r\n\r\n  }\r\n\r\n  public onStop(): void {\r\n\r\n  }\r\n\r\n\r\n\r\n  public onFirstStart(): void {\r\n    let top = <HTMLDivElement>$.Html(this.container, \"div\", [\"top\"]);\r\n    this.typeSelector = $.LabelSpanSelectFillEnum(top, \"Select a Widget\", ConfigWidgetTypes, 0);\r\n    $.Html(top, \"button\", [\"styled\"], \"Add\", [\"type\", \"button\"]).onclick = (e) => this.AddPressed();\r\n    $.Html(top, \"button\", [\"styled\"], \"Save\", [\"type\", \"button\"]).onclick = (e) => this.SavePressed();;\r\n    this.divItemlist = <HTMLDivElement>$.Html(this.container, \"div\", [\"itemlist\"]);\r\n    let xhr = new XMLHttpRequest;\r\n    xhr.responseType = \"arraybuffer\";\r\n    xhr.onerror = (e) => {\r\n      this.createWidgets(DummyGenerator.CreateIoConfig());\r\n    };\r\n    xhr.onload = (e) => {\r\n      if (xhr.status < 400) {\r\n        let arrayBuffer: ArrayBuffer = xhr.response;\r\n        let buf = new flatbuffers.ByteBuffer(new Uint8Array(arrayBuffer));\r\n        let cfg = C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);\r\n        this.createWidgets(cfg);\r\n      }\r\n      else\r\n        this.createWidgets(DummyGenerator.CreateIoConfig());\r\n    }\r\n    xhr.open(\"GET\", \"/iocfg\", true);\r\n\r\n    xhr.send(/*body is ignored with get*/);\r\n  }\r\n  private createWidgets(config: C.sensact.comm.tIoConfig) {\r\n    for (let i = 0; i < config.configsLength(); i++) {\r\n      let w: ConfigWidget | null = null;\r\n      switch (config.configs(i)?.configType()) {\r\n        case C.sensact.comm.uConfig.tBlindConfig:\r\n          w = new BlindsConfigWidget(this);\r\n          break;\r\n        case C.sensact.comm.uConfig.tOnOffConfig:\r\n          w = new OnOffConfigWidget(this);\r\n          break;\r\n        case C.sensact.comm.uConfig.tSinglePwmConfig:\r\n          w = new SinglePwmConfigWidget(this);\r\n          break;\r\n      }\r\n      if (!w) throw new Error(\"!w\")\r\n      w.SetData(config.configs(i)!);\r\n      w.SetIndex(i);\r\n      w.renderWidget(this.divItemlist, i == 0, i + 1 == config.configsLength());\r\n      this.widgets.push(w);\r\n\r\n    }\r\n    this.redraw();\r\n  }\r\n  private SavePressed(): void {\r\n    let builder = new flatbuffers.Builder(1024);\r\n    let configs_vect: number[] = [];\r\n    for (let i = 0; i < this.widgets.length; i++) {\r\n      this.widgets[i].fillFlatbuffer(builder, configs_vect);\r\n    }\r\n    let configs = M.tIoConfig.createConfigsVector(builder, configs_vect);\r\n    let ioConfig = M.tIoConfig.createtIoConfig(builder, 0, configs);\r\n    builder.finish(ioConfig);\r\n    let xhr = new XMLHttpRequest;\r\n    xhr.open(\"PUT\", \"/iocmd\", true);\r\n    xhr.send(builder.asUint8Array());\r\n  }\r\n  private AddPressed(): void {\r\n    let w: ConfigWidget | null = null;\r\n    switch (Number.parseInt(this.typeSelector.value)) {\r\n      case ConfigWidgetTypes.Blind:\r\n        w = new BlindsConfigWidget(this);\r\n        break;\r\n      case ConfigWidgetTypes.OnOff:\r\n        w = new OnOffConfigWidget(this);\r\n        break;\r\n      case ConfigWidgetTypes.SinglePwm:\r\n        w = new SinglePwmConfigWidget(this);\r\n        break;\r\n    }\r\n    if (!w) throw new Error(\"if(!w)\")\r\n    w.renderWidget(this.divItemlist, false, false);//muss hier gerendert werden, damit die Elemente exisitieren, die beim redraw->CopyDataFromHtmlToModel() ausgewertet werden\r\n    this.widgets.push(w);\r\n    this.redraw();\r\n  }\r\n\r\n  private redraw(): void {\r\n    for (let i = 0; i < this.widgets.length; i++) {\r\n      this.widgets[i].CopyDataFromHtmlToModel();\r\n    }\r\n    this.divItemlist.innerText = \"\";\r\n    for (let i = 0; i < this.widgets.length; i++) {\r\n      this.widgets[i].SetIndex(i);\r\n      this.widgets[i].renderWidget(this.divItemlist, i == 0, i + 1 == this.widgets.length);\r\n    }\r\n  }\r\n\r\n  constructor(appManagement: AppManagement, container: HTMLElement) {\r\n    super(appManagement, container);\r\n  }\r\n  moveUp(i: number): void {\r\n    let w = this.widgets[i - 1];\r\n    this.widgets[i - 1] = this.widgets[i];\r\n    this.widgets[i] = w;\r\n    this.redraw();\r\n  }\r\n  moveDown(i: number): void {\r\n    let w = this.widgets[i];\r\n    this.widgets[i] = this.widgets[i + 1];\r\n    this.widgets[i + 1] = w;\r\n    this.redraw();\r\n  }\r\n  delete(i: number): void {\r\n    this.widgets.splice(i, 1);\r\n    this.redraw();\r\n  }\r\n}","import { ConfigWidgetManager } from \"./Interfaces\";\r\nimport { flatbuffers } from 'flatbuffers'; // located in node_modules\r\nimport * as C from '../generated/webui_core_comm_generated';\r\nimport { $ } from \"./Utils\"\r\nimport M=C.sensact.comm;\r\n\r\n\r\nexport abstract class ConfigWidget {\r\n    private index: number = 0;\r\n    public abstract fillFlatbuffer(builder:flatbuffers.Builder, vect:number[]): void;\r\n    protected abstract renderWidgetCoreForm(container: HTMLDivElement): void;\r\n    public renderWidget(container: HTMLElement, isFirst:boolean, isLast:boolean){\r\n        let wCont= <HTMLDivElement>$.Html(container, \"div\");\r\n        this.renderWidgetCoreForm(wCont);\r\n        if(!isFirst)\r\n            $.Html(wCont, \"button\", [\"styled\"], \"▲\", [\"type\", \"button\"]).onclick = (e) => this.UpPressed();\r\n        if(!isLast)\r\n            $.Html(wCont, \"button\", [\"styled\"], \"▼\", [\"type\", \"button\"]).onclick = (e) => this.DownPressed();;\r\n        let btnDelete=$.Html(wCont, \"button\", [\"styled\"], \"\", [\"type\", \"button\"]);\r\n        btnDelete.onclick = (e) => this.DeletePressed();\r\n        $.SvgIcon(btnDelete, \"bin2\", [\"smallicon\"]);\r\n    }\r\n\r\n    public SetIndex(i: number) {\r\n        this.index = i\r\n    }\r\n    public UpPressed() {\r\n        this.manager.moveUp(this.index);\r\n    }\r\n    public abstract SetData(config:M.tConfigWrapper):void;\r\n    public abstract CopyDataFromHtmlToModel():void;\r\n\r\n    public DownPressed() {\r\n        this.manager.moveDown(this.index);\r\n    }\r\n\r\n    public DeletePressed() {\r\n        this.manager.delete(this.index);\r\n    }\r\n\r\n    constructor(protected manager: ConfigWidgetManager) { }\r\n}\r\n\r\nexport class OnOffConfigWidget extends ConfigWidget{\r\n\r\n    private inpRelay!: HTMLInputElement;\r\n    private relay=0;\r\n    private inpInitialState!: HTMLSelectElement;\r\n    private initialState=M.eOnOffState.AUTO_OFF;\r\n    private inpAutoOffMs!: HTMLInputElement;\r\n    private autoOffMs=60000;\r\n\r\n    \r\n    protected renderWidgetCoreForm(container: HTMLDivElement): void {\r\n        $.Html(container, \"h3\", [], \"OnOff\");\r\n        this.inpRelay=$.LabelSpanInput(container, \"Relay\", this.relay, 0, 65535);\r\n        this.inpInitialState=$.LabelSpanSelectFillEnum(container, \"Initial State\", M.eOnOffState, this.initialState)\r\n        this.inpAutoOffMs=$.LabelSpanInput(container, \"AutoOff [ms]\", this.autoOffMs, 0, 100000);\r\n    }\r\n    public SetData(config: M.tConfigWrapper): void {\r\n        if(config.configType()!=M.uConfig.tOnOffConfig) return;\r\n        let x = config.config(new M.tOnOffConfig());\r\n        if(!(x !== null && x !== undefined)) return;\r\n        this.relay=x.relay();\r\n        this.initialState=x.initialState();\r\n        this.autoOffMs=x.autoOffMsecs();\r\n    }\r\n    public CopyDataFromHtmlToModel(): void {\r\n        this.relay=this.inpRelay.valueAsNumber;\r\n        this.initialState=Number.parseInt(this.inpInitialState.value);\r\n        this.autoOffMs=this.inpAutoOffMs.valueAsNumber;\r\n    }\r\n    \r\n    public fillFlatbuffer(builder:flatbuffers.Builder, vect:number[]): void {\r\n        let x = M.tOnOffConfig.createtOnOffConfig(builder, this.relay, this.initialState, this.autoOffMs);\r\n        vect.push(x);\r\n        return;\r\n    }\r\n}\r\n\r\n\r\nexport class BlindsConfigWidget extends ConfigWidget {\r\n   \r\n    private inpRelay1!: HTMLInputElement;\r\n    private relay1=0;\r\n    private inpRelay2!: HTMLInputElement;\r\n    private relay2=0;\r\n    private inpMode!: HTMLSelectElement;\r\n    private mode=M.eRelayInterlockMode.RELAY1_DOWN__RELAY2_UP;\r\n    private inpUp!: HTMLInputElement;\r\n    private up_msec=60000;\r\n    private inpDown!: HTMLInputElement;\r\n    private down_msec=60000;\r\n\r\n    public renderWidgetCoreForm(wCont: HTMLDivElement): void{\r\n        \r\n        $.Html(wCont, \"h3\", [], \"Blind\");\r\n        this.inpRelay1=$.LabelSpanInput(wCont, \"Relay1\", this.relay1, 0, 65535);\r\n        this.inpRelay2=$.LabelSpanInput(wCont, \"Relay2\", this.relay2, 0, 65535);\r\n        this.inpMode=$.LabelSpanSelectFillEnum(wCont, \"Mode\", M.eRelayInterlockMode, this.mode)\r\n        this.inpUp=$.LabelSpanInput(wCont, \"Up [ms]\", this.up_msec, 1, 100000);\r\n        this.inpDown=$.LabelSpanInput(wCont, \"Down [ms]\", this.down_msec, 1, 100000);\r\n    }\r\n\r\n    public SetData(config:M.tConfigWrapper):void{\r\n        if(config.configType()!=M.uConfig.tBlindConfig) return;\r\n        let x = config.config(new M.tBlindConfig());\r\n        if(!(x !== null && x !== undefined)) return;\r\n        this.relay1=x.relay1();\r\n        this.relay2=x.relay2();\r\n        this.mode=x.mode();\r\n        this.up_msec=x.timeUpMsecs();\r\n        this.down_msec=x.timeDownMsecs();          \r\n    }\r\n\r\n    public CopyDataFromHtmlToModel(){\r\n        this.relay1=this.inpRelay1.valueAsNumber;\r\n        this.relay2=this.inpRelay2.valueAsNumber;\r\n        this.mode=Number.parseInt(this.inpMode.value);\r\n        this.up_msec=this.inpUp.valueAsNumber;\r\n        this.down_msec=this.inpDown.valueAsNumber;\r\n    }\r\n\r\n\r\n    public fillFlatbuffer(builder:flatbuffers.Builder, vect:number[]): void{\r\n        let x = M.tBlindConfig.createtBlindConfig(builder, this.relay1, this.relay2, this.mode, this.up_msec, this.down_msec);\r\n        vect.push(x);\r\n        return;\r\n    }\r\n}\r\n\r\nexport class SinglePwmConfigWidget extends ConfigWidget {\r\n    private inpPwmFirst!: HTMLInputElement;\r\n    private pwmFirst=0;\r\n    private inpPwmLast!: HTMLInputElement;\r\n    private pwmLast=0;\r\n    private inpStandbyControllerId!: HTMLInputElement;\r\n    private standbyControllerId=0;\r\n    private inpAutoOffMs!: HTMLInputElement;\r\n    private autoOffMs=60000;\r\n\r\n    public renderWidgetCoreForm(wCont: HTMLDivElement): void{\r\n        $.Html(wCont, \"h3\", [], \"SinglePwm\");\r\n        this.inpPwmFirst=$.LabelSpanInput(wCont, \"pwm_first\",this.pwmFirst, 0, 65535);\r\n        this.inpPwmLast=$.LabelSpanInput(wCont, \"pwm_last\", this.pwmLast, 0, 65535);\r\n        this.inpStandbyControllerId=$.LabelSpanInput(wCont, \"stndby\", this.standbyControllerId, 0, 65535);\r\n        this.inpAutoOffMs=$.LabelSpanInput(wCont, \"AutoOff [ms]\", this.autoOffMs, 0, 100000);\r\n    }\r\n\r\n    public SetData(config:M.tConfigWrapper):void{\r\n        if(config.configType()!=M.uConfig.tSinglePwmConfig) return;\r\n        let x = config.config(new M.tSinglePwmConfig());\r\n        if(!(x !== null && x !== undefined)) return;\r\n        this.pwmFirst=x.pwmFirst();\r\n        this.pwmLast=x.pwmLast();\r\n        this.standbyControllerId=x.idOfStandbyController();\r\n        this.autoOffMs=x.autoOffMsecs();     \r\n    }\r\n\r\n    public CopyDataFromHtmlToModel(){\r\n        this.pwmFirst=this.inpPwmFirst.valueAsNumber;\r\n        this.pwmLast=this.inpPwmLast.valueAsNumber;\r\n        this.standbyControllerId=this.inpStandbyControllerId.valueAsNumber;\r\n        this.autoOffMs=this.inpAutoOffMs.valueAsNumber;\r\n    }\r\n\r\n    public fillFlatbuffer(builder:flatbuffers.Builder, vect:number[]): void{\r\n        let x = M.tSinglePwmConfig.createtSinglePwmConfig(builder, this.pwmFirst, this.pwmLast, this.standbyControllerId, this.autoOffMs);\r\n        vect.push(x);\r\n        return;\r\n    }\r\n}","import { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement, WidgetContainer } from \"./Interfaces\";\r\nimport { BlindsWidget, SinglePwmWidget, OnOffWidget, Widget } from \"./Widgets\";\r\nimport { $ } from \"./Utils\";\r\nimport { flatbuffers } from 'flatbuffers'; // located in node_modules\r\nimport * as C from '../generated/webui_core_comm_generated';\r\nimport { DummyGenerator } from \"./DummyData\";\r\n\r\nexport let DE_de = new Intl.NumberFormat('de-DE');\r\nexport const UPDATE_EACH_INTERVAL = 2;\r\n\r\n\r\nexport class ControlScreenController extends ScreenController implements WidgetContainer{\r\n  private widgets:Map<number, Widget>;\r\n  private timeOfLastprocessIoCtrl=0;\r\n  private timer: number | undefined;\r\n\r\n  public createWidgets(config:C.sensact.comm.tIoConfig){\r\n    let id=1;\r\n    for(let i=0;i<config.configsLength();i++){\r\n      let w:Widget|undefined;\r\n      let widgetContainer= $.Html(this.container, \"div\", []);\r\n      switch(config.configs(i)?.configType()){\r\n        case C.sensact.comm.uConfig.tBlindConfig:\r\n          w=new BlindsWidget(this, id);\r\n          break;\r\n        case C.sensact.comm.uConfig.tOnOffConfig:\r\n          w=new OnOffWidget(this, id);\r\n          break;\r\n        case C.sensact.comm.uConfig.tSinglePwmConfig:\r\n          w=new SinglePwmWidget(this, id);\r\n          break;\r\n      }\r\n      if(w !== null && w !== undefined){\r\n        this.widgets.set(id, w);\r\n        w.renderWidgetAndHookHandlers(widgetContainer);\r\n      }\r\n      id++;\r\n    }\r\n  }\r\n\r\n  public  http_put_iocmd(buf:Uint8Array) {\r\n    this.timeOfLastprocessIoCtrl=Date.now()+60000;//um http_get_ioctrl zunächst mal zu vermeiden\r\n    let xhr = new XMLHttpRequest;\r\n    xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n    xhr.open(\"PUT\", \"/iocmd\", true);\r\n    xhr.responseType = \"arraybuffer\";\r\n    xhr.onload = (e) => this.processIoState(xhr);\r\n    xhr.send(buf);\r\n  }\r\n\r\n  public  http_get_iocmd() {\r\n    if(Date.now()-this.timeOfLastprocessIoCtrl<800){\r\n      return;\r\n    }\r\n    let xhr = new XMLHttpRequest;\r\n    xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n    xhr.open(\"GET\", \"/iocmd\", true);\r\n    xhr.responseType = \"arraybuffer\";\r\n    xhr.onload = (e) => this.processIoState(xhr);\r\n    xhr.send();\r\n  }\r\n\r\n  public processIoState(xhr:XMLHttpRequest){\r\n    this.timeOfLastprocessIoCtrl=Date.now()\r\n    if(xhr.responseType!=\"arraybuffer\"){\r\n      console.error(\"No arraybuffer returned!\");\r\n      return;\r\n    }\r\n    let buf = new flatbuffers.ByteBuffer(new Uint8Array(xhr.response));\r\n    let r= C.sensact.comm.tState.getRootAstState(buf);\r\n    for(let i=0;i<r.statesLength();i++){\r\n      let appId=r.states(i)!.applicationId();\r\n      let widget=this.widgets.get(appId);\r\n      widget?.processIoState(r, i);\r\n    }\r\n  }\r\n\r\n  public onCreate(): void { }\r\n  \r\n  public onRestart(): void {\r\n    this.timer = window.setInterval(() => { this.http_get_iocmd(); }, 1000);\r\n  }\r\n  \r\n  public onStop(): void {\r\n    window.clearInterval(this.timer);\r\n  }\r\n  \r\n  public onFirstStart(): void {\r\n    this.timer = window.setInterval(() => { this.http_get_iocmd(); }, 1000);\r\n\r\n    \r\n    let xhr = new XMLHttpRequest;\r\n    xhr.responseType = \"arraybuffer\";\r\n    xhr.onerror = (e) => {\r\n      this.createWidgets(DummyGenerator.CreateIoConfig());\r\n    };\r\n    xhr.onload = (e) => {\r\n      if(xhr.status<400){\r\n        let arrayBuffer:ArrayBuffer=xhr.response;\r\n        let buf = new flatbuffers.ByteBuffer(new Uint8Array(arrayBuffer));\r\n        let cfg= C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);\r\n        this.createWidgets(cfg);\r\n      }\r\n      else\r\n        this.createWidgets(DummyGenerator.CreateIoConfig());\r\n    }\r\n    xhr.open(\"GET\", \"/iocfg\", true);\r\n    \r\n    xhr.send(/*body is ignored with get*/);\r\n  }\r\n  \r\n  constructor(appManagement: AppManagement, container: HTMLElement) {\r\n    super(appManagement, container);\r\n    this.widgets = new Map<number, Widget>();\r\n  }\r\n}","import { flatbuffers } from 'flatbuffers'; // located in node_modules\r\nimport * as C from '../generated/webui_core_comm_generated';\r\n\r\nexport class DummyGenerator{\r\n    public static CreateIoConfig():C.sensact.comm.tIoConfig{\r\n        let builder = new flatbuffers.Builder(1024);\r\n        let cfg1=C.sensact.comm.tBlindConfig.createtBlindConfig(builder, 1,2,C.sensact.comm.eRelayInterlockMode.RELAY1_UP__RELAY2_DOWN, 30000, 30000);\r\n        let wCfg1 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tBlindConfig, cfg1);\r\n        let cfg2=C.sensact.comm.tSinglePwmConfig.createtSinglePwmConfig(builder, 3, 3, 3, 20000);\r\n        let wCfg2 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tSinglePwmConfig, cfg2);\r\n        let cfg3=C.sensact.comm.tOnOffConfig.createtOnOffConfig(builder, 4, 20000, C.sensact.comm.eOnOffState.AUTO_OFF);\r\n        let wCfg3 = C.sensact.comm.tConfigWrapper.createtConfigWrapper(builder, C.sensact.comm.uConfig.tOnOffConfig, cfg3);\r\n        let cfg_vect = C.sensact.comm.tIoConfig.createConfigsVector(builder, [wCfg1, wCfg2, wCfg3]);\r\n        let cfg= C.sensact.comm.tIoConfig.createtIoConfig(builder, 0, cfg_vect);\r\n        builder.finish(cfg);\r\n        let bytes = builder.asUint8Array();\r\n        let buf = new flatbuffers.ByteBuffer(bytes);\r\n        return C.sensact.comm.tIoConfig.getRootAstIoConfig(buf);\r\n    }\r\n}","import { AppManagement } from \"./Interfaces\";\r\nimport { ControlScreenController } from \"./ControlScreenController\";\r\nimport { ConfigScreenController } from \"./ConfigScreenController\";\r\nimport { ScreenController, ControllerState } from \"./ScreenController\";\r\nimport { $ } from \"./Utils\";\r\n\r\n\r\nclass AppController implements AppManagement {\r\n  private screenControllers: ScreenController[];\r\n  private activeControllerIndex: number;\r\n\r\n  constructor() {\r\n\r\n    this.screenControllers = [];\r\n    this.activeControllerIndex = 0;\r\n  }\r\n\r\n  private setActiveScreen(newIndex: number) {\r\n    if(newIndex==this.activeControllerIndex) return;\r\n    this.screenControllers.forEach((controller, i) => {\r\n      if (i == newIndex) {\r\n        controller.showDIV();\r\n        if (controller.State == ControllerState.CREATED) {\r\n          controller.onFirstStart();\r\n          controller.State = ControllerState.STARTED;\r\n        }\r\n        else {\r\n          controller.onRestart();\r\n          controller.State = ControllerState.STARTED;\r\n        }\r\n      } else {\r\n        controller.hideDIV();\r\n        if (controller.State == ControllerState.STARTED) {\r\n          controller.onStop();\r\n          controller.State = ControllerState.STOPPED;\r\n        }\r\n      }\r\n    });\r\n    this.activeControllerIndex = newIndex;\r\n  }\r\n\r\n  public startup() {\r\n    let header = <HTMLElement>document.querySelector(\"header\");\r\n    $.Html(<HTMLElement>header, \"button\", [\"small\"], \"CMD\", [\"type\", \"button\"]).onclick = (e) => this.setActiveScreen(0);\r\n    $.Html(<HTMLElement>header, \"button\", [\"small\"], \"CFG\", [\"type\", \"button\"]).onclick = (e) => this.setActiveScreen(1);\r\n    \r\n    this.screenControllers.push(new ControlScreenController(this,$.HtmlAfter(header, \"main\", [\"ControlScreen\"])));\r\n    this.screenControllers.push(new ConfigScreenController(this,$.HtmlAfter(header, \"main\", [\"ConfigScreen\"])));\r\n    this.setActiveScreen(0);\r\n  }\r\n}\r\n\r\nlet app: AppController;\r\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\r\n  app = new AppController();\r\n  app.startup();\r\n});","import { AppManagement } from \"./Interfaces\";\r\n\r\nexport enum ControllerState {\r\n    CREATED,\r\n    STARTED,\r\n    STOPPED,\r\n}\r\n\r\nexport abstract class ScreenController {\r\n    private state: ControllerState;\r\n    constructor(protected appManagement:AppManagement, protected container: HTMLElement) {\r\n        this.hideDIV();\r\n        this.state = ControllerState.CREATED;\r\n    }\r\n    get ElementId() { return this.container.id; }\r\n    get State() { return this.state; }\r\n    set State(value: ControllerState) { this.state = value; }\r\n    abstract onCreate(): void;\r\n    abstract onFirstStart(): void;\r\n    abstract onRestart(): void;\r\n    abstract onStop(): void;\r\n    public showDIV() {\r\n        this.container.style.display = \"flex\";\r\n    }\r\n    public hideDIV() {\r\n        this.container.style.display = \"none\";\r\n    }\r\n}\r\n","export class Utils\r\n{\r\n    public static EventCoordinatesInSVG(evt:MouseEvent, element:Element, positionRatio:number=1):Location2D {\r\n        let rect = element.getBoundingClientRect();\r\n        return {x: (evt.clientX - rect.left)/positionRatio, y:(evt.clientY - rect.top)/positionRatio}\r\n    }\r\n}\r\n\r\nexport interface Location2D {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface KeyValueTuple {\r\n    key: string;\r\n    value: any;\r\n}\r\n\r\nexport class StringNumberTuple{\r\n    public constructor(public s:string, public n:number){}\r\n}\r\n\r\n\r\nexport class $\r\n{\r\n    \r\n    public static readonly SVGNS = \"http://www.w3.org/2000/svg\";\r\n    public static readonly XLINKNS = \"http://www.w3.org/1999/xlink\";\r\n    public static readonly HTMLNS = \"http://www.w3.org/1999/xhtml\";\r\n\r\n    public static Svg(parent: Element, type:string, classes?: string[],  attributes?:string[]):SVGElement {\r\n        return  parent.appendChild(<SVGElement>$.Elem($.SVGNS, type, classes, \"\", attributes));\r\n    }\r\n\r\n    public static SvgIcon(parent: Element, iconname:string, classes:string[]=[]):SVGSVGElement\r\n    {\r\n        let svg = <SVGSVGElement>$.Svg(parent, \"svg\", classes, [\"icon\", \"icon-\"+iconname]);\r\n        let use =$.Svg(svg, \"use\", [], []);\r\n        use.setAttributeNS(this.XLINKNS, \"href\", \"#icon-\"+iconname);\r\n        parent.appendChild(svg);\r\n        return svg;\r\n    }\r\n\r\n    public static ColorNumColor2ColorDomString(num:number):string {\r\n        let str = num.toString(16);\r\n        while (str.length < 6) str = \"0\" + num;\r\n        return \"#\"+str;\r\n    }\r\n\r\n    public static ColorDomString2ColorNum(colorString: string):number {\r\n        return parseInt(colorString.substring(1), 16);\r\n    }\r\n\r\n    public static Html(parent: Element, type:string,  classes?: string[], textContent?:string, attributes?:string[]):HTMLElement {\r\n        return parent.appendChild(<HTMLElement>$.Elem($.HTMLNS, type, classes, textContent, attributes));\r\n    }\r\n\r\n    public static HtmlAfter(previous: HTMLElement, type:string,  classes?: string[], textContent?:string, attributes?:string[]):HTMLElement {\r\n        return previous.parentElement!.insertBefore(<HTMLElement>$.Elem($.HTMLNS, type, classes, textContent, attributes), previous.nextSibling);\r\n    }\r\n\r\n    public static HtmlAsFirstChild(parent: Element, type:string, classes?: string[], textContent?:string, attributes?:string[]):HTMLElement {\r\n        if(parent.firstChild)\r\n            return parent.insertBefore(<HTMLElement>$.Elem($.HTMLNS, type, classes, textContent, attributes), parent.firstChild);\r\n        else\r\n            return parent.appendChild(<HTMLElement>$.Elem($.HTMLNS, type, classes, textContent, attributes));\r\n    }\r\n\r\n    private static Elem(ns:string, type:string, classes: string[]=[], textContent:string=\"\", attributes:string[]=[]):Element\r\n    {\r\n        let element = document.createElementNS(ns, type);\r\n        if(classes)\r\n        {\r\n            for (const clazz of classes) {\r\n                element.classList.add(clazz);\r\n            }\r\n        }\r\n        let i:number;\r\n        for(i=0;i<attributes.length;i+=2)\r\n        {\r\n            element.setAttribute(attributes[i], attributes[i+1]);\r\n        }\r\n        if(textContent)\r\n        {\r\n            element.textContent=textContent;\r\n        }\r\n        return element;\r\n    }\r\n\r\n    public static InputNumber(table:HTMLTableSectionElement, min:number, max:number, key:string, cfg:KeyValueTuple[]|null):HTMLInputElement\r\n    {\r\n        let value:number=0;\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key && !isNaN(e.value)){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [\"develop-propertygrid-td\"]);\r\n        return <HTMLInputElement>$.Html(inputContainer, \"input\", [], \"\", [\"type\", \"number\", \"min\", \"\"+Math.round(min), \"max\", \"\"+Math.round(max), \"value\", \"\"+Math.round(value),]);\r\n    }\r\n\r\n    public static LabelSpanInput(parent:HTMLDivElement, label:string, value:number, min:number, max:number):HTMLInputElement{\r\n        let lbl= <HTMLLabelElement>$.Html(parent, \"label\");\r\n        $.Html(lbl, \"span\", [], label);\r\n        return <HTMLInputElement>$.Html(lbl, \"input\", [], \"\", [\"type\", \"number\", \"value\", value+\"\", \"min\", min+\"\", \"max\", max+\"\"]);\r\n    }\r\n    public static LabelSpanSelectFillEnum(parent:HTMLDivElement, label:string, enumeration:any, defaultEnum:number):HTMLSelectElement{\r\n        const names= Object.keys(enumeration).filter(k => typeof enumeration[k as any] === \"number\");\r\n        const numbers = names.map(k => enumeration[k as any]);\r\n        let lbl= <HTMLLabelElement>$.Html(parent, \"label\");\r\n        $.Html(lbl, \"span\", [], label);\r\n        let select= <HTMLSelectElement>$.Html(lbl, \"select\");\r\n        for(let i=0;i<names.length;i++){\r\n            let option=<HTMLOptionElement>$.Html(select, \"option\", [], names[i], [\"value\", numbers[i]]);\r\n            if(i==defaultEnum) option.selected=true;\r\n        }\r\n        return select;\r\n    }\r\n\r\n    public static InputSelect(table:HTMLTableSectionElement, displayValueAndKeyvalues:StringNumberTuple[], key:string, cfg:KeyValueTuple[]|null):HTMLSelectElement\r\n    {\r\n        let value:number=0;\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key && !isNaN(e.value)){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [\"develop-propertygrid-td\"]);\r\n        let select = <HTMLSelectElement>$.Html(inputContainer, \"select\");\r\n        for(let i=0;i<displayValueAndKeyvalues.length;i++)\r\n        {\r\n            let option = $.Html(select, \"option\", [], displayValueAndKeyvalues[i].s, [\"value\", \"\"+displayValueAndKeyvalues[i].n]);\r\n            if(i==value){\r\n                option.setAttribute(\"selected\", \"\");\r\n            }\r\n        }\r\n        return select;\r\n    }\r\n\r\n   \r\n\r\n    public static InputColor(table:HTMLTableSectionElement, key:string, cfg:KeyValueTuple[]|null):HTMLInputElement\r\n    {\r\n        let value:string=\"#ff0000\";\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [\"develop-propertygrid-td\"]);\r\n        return <HTMLInputElement>$.Html(inputContainer, \"input\", [], \"\", [\"type\", \"color\",  \"value\", value]);\r\n    }\r\n}","import {WidgetContainer as WidgetManager } from \"./Interfaces\";\r\nimport { flatbuffers } from 'flatbuffers'; // located in node_modules\r\nimport * as C from '../generated/webui_core_comm_generated';\r\nimport { $ } from \"./Utils\"\r\nexport const UPDATE_EACH_INTERVAL = 2;\r\ndeclare var iro: any;\r\n\r\nconst KELVIN_MAX = 6500;\r\nconst KELVIN_MIN = 2700;\r\nexport abstract class Widget {\r\n  public abstract processIoState(r: C.sensact.comm.tState, i: number): void;\r\n  public abstract renderWidgetAndHookHandlers(container: HTMLElement): void;\r\n  constructor(protected manager: WidgetManager, protected id: number) { }\r\n}\r\n\r\n\r\n\r\nexport class BlindsWidget extends Widget {\r\n  private butBlindsUp!: HTMLButtonElement;\r\n  private butBlindsStop!: HTMLButtonElement;\r\n  private butBlindsDown!: HTMLButtonElement;\r\n\r\n  public processIoState(r: C.sensact.comm.tState, i: number): void {\r\n    if (r.states(i)?.stateType() != C.sensact.comm.uState.tBlindState) {\r\n      return;\r\n    }\r\n    let state = r.states(i)!.state(new C.sensact.comm.tBlindState())!.state();\r\n    //let position = r.states(i)!.state(new C.sensact.comm.tBlindState())!.position();\r\n    switch (state) {\r\n      case C.sensact.comm.eBlindState.DOWN:\r\n        this.butBlindsDown.style.color = \"green\";\r\n        this.butBlindsUp.style.color = \"black\";\r\n        break;\r\n      case C.sensact.comm.eBlindState.UP:\r\n        this.butBlindsDown.style.color = \"black\";\r\n        this.butBlindsUp.style.color = \"green\";\r\n        break;\r\n      default:\r\n        this.butBlindsDown.style.color = \"black\";\r\n        this.butBlindsUp.style.color = \"black\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  private blindEventBuilder(e:C.sensact.comm.eBlindCommand):Uint8Array{\r\n    let builder = new flatbuffers.Builder(1024);\r\n    let evt = C.sensact.comm.tBlindCommand.createtBlindCommand(builder, e);\r\n    let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tBlindCommand, this.id, evt);\r\n    builder.finish(ioCmd);\r\n    return builder.asUint8Array();\r\n  }\r\n\r\n  public renderWidgetAndHookHandlers(container: HTMLElement) {\r\n    this.butBlindsUp = <HTMLButtonElement>$.Html(container, \"button\", [\"updown\"], \"🢁\");//<button id=\"blindsUp\" class=\"updown\" style=\"flex: 1 1 0;\">&#129153;</button>\r\n    this.butBlindsUp.style.flex = \"1 1 0\";\r\n    this.butBlindsStop = <HTMLButtonElement>$.Html(container, \"button\");//<button id=\"blindsStop\" style=\"flex: 1 1 0;\"><svg class=\"icon\"><use style=\"fill:black;\" xlink:href=\"#icon-blinds\"></use></svg></button>\r\n    this.butBlindsStop.style.flex = \"1 1 0\";\r\n    $.SvgIcon(this.butBlindsStop, \"blinds\").style.fill = \"black\";\r\n    this.butBlindsDown = <HTMLButtonElement>$.Html(container, \"button\", [\"updown\"], \"🢃\");//<button id=\"blindsDown\" class=\"updown\" style=\"flex: 1 1 0;\">&#129155;</button>\r\n    this.butBlindsDown.style.flex = \"1 1 0\";\r\n\r\n    this.butBlindsUp.onclick = (e) => {\r\n      this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.UP));\r\n    }\r\n    this.butBlindsStop.onclick = (e) => {\r\n      this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.STOP));\r\n    }\r\n    this.butBlindsDown.onclick = (e) => {\r\n      this.manager.http_put_iocmd(this.blindEventBuilder(C.sensact.comm.eBlindCommand.DOWN));\r\n    }\r\n  }\r\n\r\n  constructor(m: WidgetManager, id: number) {\r\n    super(m, id);\r\n  }\r\n}\r\n\r\n\r\nexport class SinglePwmWidget extends Widget {\r\n  private butSpotsOnOff!: HTMLButtonElement;\r\n  private spotsPicker!: any;\r\n  private firstCallOfProcessIoCtrl=true;\r\n\r\n  public processIoState(r: C.sensact.comm.tState, i: number) {\r\n    if (r.states(i)?.stateType() != C.sensact.comm.uState.tSinglePwmState) {\r\n      return;\r\n    }\r\n    let on = r.states(i)!.state(new C.sensact.comm.tSinglePwmState())!.on();\r\n    let intensity_0_100 = r.states(i)!.state(new C.sensact.comm.tSinglePwmState())!.intensity0100();\r\n    this.butSpotsOnOff.style.backgroundColor=on?\"green\":\"grey\";\r\n    if(this.firstCallOfProcessIoCtrl){\r\n      this.spotsPicker.color.set(intensity_0_100);\r\n      this.firstCallOfProcessIoCtrl=false;\r\n    }\r\n  }\r\n\r\n \r\n\r\n  public renderWidgetAndHookHandlers(container: HTMLElement) {\r\n\r\n    let pickerContainer = $.Html(container, \"div\", []);\r\n    pickerContainer.style.flex = \"1 1 0\";\r\n    pickerContainer.style.alignSelf = \"center\";\r\n    this.butSpotsOnOff = <HTMLButtonElement>$.Html(container, \"button\", [\"onoff\"]);//<button id=\"blindsUp\" class=\"updown\" style=\"flex: 1 1 0;\">&#129153;</button>\r\n    this.butSpotsOnOff.style.flex = \"0 0 0\";\r\n    $.SvgIcon(this.butSpotsOnOff, \"spot\").style.fill = \"black\";\r\n\r\n    let width = Math.min(400, 0.9 * pickerContainer.offsetWidth);\r\n\r\n    this.spotsPicker = new iro.ColorPicker(pickerContainer, {\r\n      width: width,\r\n      layoutDirection: 'vertical',\r\n      color: \"#000\",\r\n      layout: [\r\n        {\r\n          component: iro.ui.Slider,\r\n          options: {\r\n            sliderType: 'value',\r\n          }\r\n        },\r\n      ]\r\n    });\r\n    this.spotsPicker.on('input:change', (color: any, changes: any) => {\r\n      let intensity0_100 = color.value;\r\n      console.info(intensity0_100);\r\n      let builder = new flatbuffers.Builder(1024);\r\n      let evt = C.sensact.comm.tSinglePwmCommand.createtSinglePwmCommand(builder, C.sensact.comm.eSinglePwmCommand.CHANGE_INTENSITY, intensity0_100);\r\n      let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tSinglePwmCommand, this.id, evt);\r\n      builder.finish(ioCmd);\r\n      this.manager.http_put_iocmd(builder.asUint8Array());\r\n    });\r\n    this.butSpotsOnOff.onclick = (e) => {\r\n      let builder = new flatbuffers.Builder(1024);\r\n      C.sensact.comm.tSinglePwmCommand.starttSinglePwmCommand(builder);\r\n      C.sensact.comm.tSinglePwmCommand.addCmd(builder, C.sensact.comm.eSinglePwmCommand.TOGGLE);\r\n      let evt = C.sensact.comm.tSinglePwmCommand.endtSinglePwmCommand(builder);\r\n      let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tSinglePwmCommand, this.id, evt);\r\n      builder.finish(ioCmd);\r\n      this.manager.http_put_iocmd(builder.asUint8Array());\r\n    }\r\n  }\r\n\r\n  constructor(manager: WidgetManager, id: number) {\r\n    super(manager, id);\r\n  }\r\n}\r\n\r\nexport class OnOffWidget extends Widget {\r\n  private butOn!: HTMLDivElement;\r\n  private butAuto!: HTMLDivElement;\r\n  private butOff!: HTMLDivElement;\r\n  private selector!: HTMLDivElement;\r\n  private state: C.sensact.comm.eOnOffState = C.sensact.comm.eOnOffState.AUTO_OFF;\r\n\r\n  private updateUI(newState: C.sensact.comm.eOnOffState) {\r\n    this.state = newState;\r\n    switch (this.state) {\r\n      case C.sensact.comm.eOnOffState.AUTO_OFF:\r\n        this.selector.style.left = this.butOn.clientWidth + \"px\";\r\n        this.selector.style.width = this.butAuto.clientWidth + \"px\";\r\n        this.selector.innerHTML = \"AUTO\";\r\n        this.selector.style.backgroundColor = \"black\";\r\n        this.selector.style.color = \"white\";\r\n        this.selector.style.visibility = \"visible\";\r\n        break;\r\n      case C.sensact.comm.eOnOffState.AUTO_ON:\r\n        this.selector.style.left = this.butOn.clientWidth + \"px\";\r\n        this.selector.style.width = this.butAuto.clientWidth + \"px\";\r\n        this.selector.innerHTML = \"AUTO\";\r\n        this.selector.style.backgroundColor = \"green\";\r\n        this.selector.style.color = \"black\";\r\n        this.selector.style.visibility = \"visible\";\r\n        break;\r\n      case C.sensact.comm.eOnOffState.MANUAL_ON:\r\n        this.selector.style.left = \"0px\";\r\n        this.selector.style.width = this.butOn.clientWidth + \"px\";\r\n        this.selector.innerHTML = \"ON\";\r\n        this.selector.style.backgroundColor = \"green\";\r\n        this.selector.style.color = \"black\";\r\n        this.selector.style.visibility = \"visible\";\r\n        break;\r\n      case C.sensact.comm.eOnOffState.MANUAL_OFF:\r\n        this.selector.style.left = this.butOn.clientWidth + this.butAuto.clientWidth + 1 + \"px\";\r\n        this.selector.style.width = this.butOff.clientWidth + \"px\";\r\n        this.selector.innerHTML = \"OFF\";\r\n        this.selector.style.backgroundColor = \"black\";\r\n        this.selector.style.color = \"white\";\r\n        this.selector.style.visibility = \"visible\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  public processIoState(r: C.sensact.comm.tState, i: number): void {\r\n    if (r.states(i)?.stateType() != C.sensact.comm.uState.tOnOffState) {\r\n      return;\r\n    }\r\n    let state = r.states(i)!.state(new C.sensact.comm.tOnOffState())!.state();\r\n    this.updateUI(state)\r\n  }\r\n\r\n  public renderWidgetAndHookHandlers(container: HTMLElement) {\r\n\r\n    let subcontainer = <HTMLDivElement>$.Html(container, \"div\");//one single element\r\n    subcontainer.style.flex = \"1 1 0\";\r\n    subcontainer.style.position = \"relative\";\r\n    let itemscontainer = <HTMLDivElement>$.Html(subcontainer, \"div\", [\"switch_3_ways_container\"]);//one single element//noiw, a container for the items; with flex layout\r\n    itemscontainer.style.display = \"flex\";\r\n\r\n    //itemscontainer.style.flexFlow=\"row nowrap\";//default!\r\n    //itemscontainer.style.justifyContent=\"flex-start\";//default\r\n    //itemscontainer.style.alignItems=\"stretch\";//default\r\n    this.butOn = <HTMLDivElement>$.Html(itemscontainer, \"div\", [\"switch_3_ways_item\"]);\r\n    $.Html(this.butOn, \"span\", [], \"On\");\r\n    this.butAuto = <HTMLDivElement>$.Html(itemscontainer, \"div\", [\"switch_3_ways_item\"]);\r\n    $.Html(this.butAuto, \"span\", [], \"Auto\");\r\n\r\n    this.butOff = <HTMLDivElement>$.Html(itemscontainer, \"div\", [\"switch_3_ways_item\"], \"Off\");\r\n    $.Html(this.butOff, \"span\", [], \"Off\");\r\n\r\n    this.selector = <HTMLDivElement>$.Html(subcontainer, \"div\", [\"switch_3_ways_selector\"]);\r\n    this.selector.style.visibility = \"hidden\";\r\n    $.Html(this.selector, \"span\", [], \"\");\r\n\r\n    this.butOn.onclick = (e) => {\r\n      let builder = new flatbuffers.Builder(1024);\r\n      let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.ON, 0);\r\n      let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);\r\n      builder.finish(ioCmd);\r\n      let buf = builder.asUint8Array();\r\n      this.manager.http_put_iocmd(buf);\r\n    }\r\n    this.butAuto.onclick = (e) => {\r\n      let builder = new flatbuffers.Builder(1024);\r\n      let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.AUTO, 0);\r\n      let ioCtrl = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);\r\n      builder.finish(ioCtrl);\r\n      let buf = builder.asUint8Array();\r\n      this.manager.http_put_iocmd(buf);\r\n    }\r\n    this.butOff.onclick = (e) => {\r\n      let builder = new flatbuffers.Builder(1024);\r\n      let evt = C.sensact.comm.tOnOffCommand.createtOnOffCommand(builder, C.sensact.comm.eOnOffCommand.OFF, 0);\r\n      let ioCmd = C.sensact.comm.tCommand.createtCommand(builder, C.sensact.comm.uCommand.tOnOffCommand, this.id, evt);\r\n      builder.finish(ioCmd);\r\n      let buf = builder.asUint8Array();\r\n      this.manager.http_put_iocmd(buf);\r\n    }\r\n  }\r\n\r\n  constructor(manager: WidgetManager, id: number) {\r\n    super(manager, id);\r\n  }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}