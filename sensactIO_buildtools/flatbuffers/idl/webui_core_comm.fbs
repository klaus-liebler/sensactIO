namespace sensact.comm;

enum eBlindState:byte{
  STOP=0,
	UP=1,
	DOWN=2,
  PREPARE=3,
}

enum eBlindCommand:byte{
  STOP,
  UP,
  DOWN,
  UP_OR_STOP,
  DOWN_OR_STOP,
}

enum eSinglePwmCommand:byte{
  TOGGLE,
  ON,
  OFF,
  CHANGE_INTENSITY,
}

enum eRgbwPwmCommand:byte{
  TOGGLE,
  ON,
  OFF,
  CHANGE_HUE_0_360,
  CHANGE_SATURATION_0_1,
  CHANGE_VALUE_0_1,
  CHANGE_R_0_255,
  CHANGE_G_0_255,
  CHANGE_B_0_255,
  CHANGE_WWCW_BRIGHTNESS_0_1,
  CHANGE_WWCW_RATIO_0_1,
}

enum eOnOffCommand:byte{
  ON,
  AUTO,
  OFF,
  TRIGGER,
  TRIGGER_MSECS,
}

enum eOnOffState:byte{
  MANUAL_OFF,
  MANUAL_ON,
  AUTO_OFF,
  AUTO_ON,
}

table tBlindState{
  position:uint16;
  state:eBlindState;
}

table tSinglePwmState{
  intensity_0_1:float;
  on:bool;
}

table tRgbwPwmState{
  r:uint8;
  g:uint8;
  b:uint8;
  ww:float;
  cw:float;
  on:bool;
}

table tOnOffState{
  state:eOnOffState;
}

union uState { tBlindState, tSinglePwmState, tOnOffState, tRgbwPwmState }
table tStateWrapper{
  applicationId:uint32;
  state:uState;
}
table tState{
  timestamp:uint32;
  states:[tStateWrapper];
}

table tBlindCommand{
  cmd:eBlindCommand;
}

table tSinglePwmCommand{
  cmd:eSinglePwmCommand;
  intensity_0_1:uint8;
}

table tRgbwPwmCommand{
  cmd:eRgbwPwmCommand;
  payload:float;
}

table tOnOffCommand{
  cmd:eOnOffCommand;
  msecs:uint32;
}

union uCommand{
  tBlindCommand,
  tSinglePwmCommand,
  tOnOffCommand,
  tRgbwPwmCommand,
}

table tCommand{
  applicationId:uint32;
  command:uCommand;
}

enum eRelayInterlockMode:byte{
  R1_UP__R2_DOWN,
  R1_DOWN__R2_UP,
  R1_POWER__R2_UP,
  R1_POWER__R2_DOWN,
  R1_UP__R2_POWER,
  R1_DOWN__R2_POWER,
}

table tBlindConfig{
  relay1:uint16;
	relay2:uint16;
  mode:eRelayInterlockMode;
  time_up_msecs:uint32;
  time_down_msecs:uint32;
}

table tSinglePwmConfig{
  pwmFirst:uint16;
  pwmLast:uint16;
  idOfStandbyController:uint16;
  autoOffMsecs:uint32;
}

table tRgbwPwmConfig{
  pwmR:uint16;
  pwmG:uint16;
  pwmB:uint16;
  pwmWW:uint16;
  pwmCW:uint16;
  idOfStandbyController:uint16;
  autoOffMsecs:uint32;
}

table tOnOffConfig{
  relay:uint16;
	autoOffMsecs:uint32;
	initialState:eOnOffState;
}

union uConfig { tBlindConfig, tSinglePwmConfig, tOnOffConfig, tRgbwPwmConfig}

table tConfigWrapper{
  config:uConfig;
}

table tIoConfig{
  timestamp:uint32;
  configs:[tConfigWrapper];
}
